#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.6.8 on Sun Nov  6 15:17:30 2016
#

import wx
import sys
from encryption import my_encryption
# begin wxGlade: dependencies
import gettext

from dboperations import db_operations
from validations import validate
# end wxGlade


class password_dialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyDialog.__init__
        #args[
        kwds["style"] = wx.CAPTION | wx.CLOSE_BOX | wx.STAY_ON_TOP
        wx.Dialog.__init__(self, *args, **kwds)
        self.text_ctrl_passwd = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_PASSWORD)
        self.button_cancel = wx.Button(self, wx.ID_ANY, _("Cancel"))
        self.button_ok = wx.Button(self, wx.ID_ANY, _("OK"))
        
        self.__set_properties()
        self.__do_layout()
        
        self.password_text=''
        self.Bind(wx.EVT_TEXT, self.on_passwod, self.text_ctrl_passwd)
        self.Bind(wx.EVT_BUTTON, self.on_button_cancel, self.button_cancel)
        self.Bind(wx.EVT_BUTTON, self.on_button_ok, self.button_ok)
        self.cancelled=False
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyDialog.__set_properties
        self.SetTitle(_("Enter SMS Password"))
        self.SetSize((568, 259))
        self.text_ctrl_passwd.SetMinSize((350, 40))
        self.button_cancel.SetMinSize((100, 40))
        self.button_ok.SetMinSize((100, 40))
        self.text_ctrl_passwd.SetFocus()
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyDialog.__do_layout
        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_1 = wx.GridSizer(2, 1, 40, 40)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_1.Add(self.text_ctrl_passwd, 0, 0, 0)
        sizer_3.Add(self.button_cancel, 0, wx.RIGHT | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 50)
        sizer_3.Add(self.button_ok, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(sizer_3, 1, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_2.Add(grid_sizer_1, 1, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_1.Add(sizer_2, 1, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade

    def on_passwod(self, event):  # wxGlade: MyDialog.<event_handler>
        if self.text_ctrl_passwd.Value:
            self.button_ok.Enable(True)
        else:
            self.button_ok.Disable()
        event.Skip()

    def on_button_cancel(self, event):  # wxGlade: MyDialog.<event_handler>
        self.cancelled=True
        self.Close()
        event.Skip()

    def on_button_ok(self, event):  # wxGlade: MyDialog.<event_handler>
        self.cancelled=False
        self.password_text=self.text_ctrl_passwd.Value
        self.Close()
        event.Skip()





# begin wxGlade: extracode
# end wxGlade

from wx.lib.mixins.listctrl import CheckListCtrlMixin, ListCtrlAutoWidthMixin
packages = [('abiword', '5.8M', 'base'), ('adie', '145k', 'base'),
('airsnort', '71k', 'base'), ('ara', '717k', 'base'), ('arc', '139k', 'base'),
('asc', '5.8M', 'base'), ('ascii', '74k', 'base'), ('ash', '74k', 'base')]

class CheckListCtrl(wx.ListCtrl, CheckListCtrlMixin, ListCtrlAutoWidthMixin):
    def __init__(self, parent):
        wx.ListCtrl.__init__(self, parent, -1, style=wx.LC_REPORT | wx.SUNKEN_BORDER)
        CheckListCtrlMixin.__init__(self)
        ListCtrlAutoWidthMixin.__init__(self)
        #wx.ListCtrl.InsertStringItem(
        #





class sms_dialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: sms_dialog.__init__
        kwds["style"] = wx.MAXIMIZE | wx.CLOSE_BOX | wx.THICK_FRAME|wx.CAPTION
        wx.Dialog.__init__(self, *args, **kwds)
        
        
        self.SMS_LENGTH=160
        
        
        
        self.notebook_1 = wx.Notebook(self, wx.ID_ANY, style=wx.NB_LEFT)
        self.pane_sms = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.combo_box_staff = wx.ComboBox(self.pane_sms, wx.ID_ANY, choices=[_("Select"), _("Staff"), _("Students")], style=wx.CB_DROPDOWN | wx.CB_DROPDOWN | wx.CB_READONLY | wx.CB_SORT)
        self.combo_box_year = wx.ComboBox(self.pane_sms, wx.ID_ANY, choices=[], style=wx.CB_DROPDOWN | wx.CB_READONLY)
        self.combo_box_class = wx.ComboBox(self.pane_sms, wx.ID_ANY, choices=["Select Standard","8","9","10"], style=wx.CB_DROPDOWN | wx.CB_READONLY)
        self.combo_box_div = wx.ComboBox(self.pane_sms, wx.ID_ANY, choices=[], style=wx.CB_DROPDOWN | wx.CB_READONLY)
        
        #self.checklist_ctrl_1 = wx.CheckListBox(self.pane_sms, -1, (60, 50), (30,30), ['Name of Student                       Mobile'])#CheckListCtrl(self.pane_sms)#wx.CheckListBox(self.pane_sms, wx.ID_ANY, style=wx.LC_REPORT | wx.SUNKEN_BORDER)
        self.checklist_ctrl_1 = CheckListCtrl(self.pane_sms)#wx.CheckListBox(self.pane_sms, -1, (60, 50), (30,30), ['Name of Student                       Mobile'])#CheckListCtrl(self.pane_sms)#wx.CheckListBox(self.pane_sms, wx.ID_ANY, style=wx.LC_REPORT | wx.SUNKEN_BORDER)
        
        self.button_add_contacts = wx.Button(self.pane_sms, wx.ID_ANY, _("Add Contacts"))
        self.text_ctrl_selected_contacts = wx.TextCtrl(self.pane_sms, wx.ID_ANY, "", style=wx.TE_MULTILINE  | wx.TE_LINEWRAP)
        self.button_clear_all = wx.Button(self.pane_sms, wx.ID_ANY, _("Clear all"))
        self.button_close = wx.Button(self.pane_sms, wx.ID_ANY, _("Close"))
        self.button_next = wx.Button(self.pane_sms, wx.ID_ANY, _("Next ->>"))
        self.pane_send2 = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.label_id = wx.StaticText(self.pane_send2, wx.ID_ANY, _("ID:"))
        self.text_ctrl_sms = wx.TextCtrl(self.pane_send2, wx.ID_ANY, "", style=wx.TE_MULTILINE)
        self.label_characters = wx.StaticText(self.pane_send2, wx.ID_ANY, _(str(self.SMS_LENGTH)+"/1"))
        self.label_sms_required = wx.StaticText(self.pane_send2, wx.ID_ANY, _("Number of sms required to complete the operarion"))
        self.button_back = wx.Button(self.pane_send2, wx.ID_ANY, _("<<- Back"))
        self.button_send = wx.Button(self.pane_send2, wx.ID_ANY, _("Send"))
        self.pane_report = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.panel_3 = wx.Panel(self.pane_report, wx.ID_ANY)
        self.label_6 = wx.StaticText(self.panel_3, wx.ID_ANY, _("Recent Message Details"))
        self.text_ctrl_report = wx.TextCtrl(self.panel_3, wx.ID_ANY, "", style=wx.TE_MULTILINE | wx.TE_READONLY)
        self.pane_balance = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.panel_4 = wx.Panel(self.pane_balance, wx.ID_ANY)
        self.label_balance = wx.StaticText(self.panel_4, wx.ID_ANY, _("SMS BALANCE"), style=wx.ALIGN_CENTRE)
        self.label_extra = wx.StaticText(self.panel_4, wx.ID_ANY, _("label_5"))
        self.pane_password = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.panel_5 = wx.Panel(self.pane_password, wx.ID_ANY)
        self.label_7 = wx.StaticText(self.panel_5, wx.ID_ANY, _("Current Password"))
        self.text_ctrl_current_pass = wx.TextCtrl(self.panel_5, wx.ID_ANY, "", style=wx.TE_PASSWORD)
        self.label_8 = wx.StaticText(self.panel_5, wx.ID_ANY, _("New Password"))
        self.text_ctrl_new_pass = wx.TextCtrl(self.panel_5, wx.ID_ANY, "", style=wx.TE_PASSWORD)
        self.label_9 = wx.StaticText(self.panel_5, wx.ID_ANY, _("Confirm Password"))
        self.text_ctrl_confirm_pass = wx.TextCtrl(self.panel_5, wx.ID_ANY, "", style=wx.TE_PASSWORD)
        self.button_cancel = wx.Button(self.panel_5, wx.ID_ANY, _("Cancel"))
        self.button_change = wx.Button(self.panel_5, wx.ID_ANY, _("Change Password"))
        self.pane_settings = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.panel_1 = wx.Panel(self.pane_settings, wx.ID_ANY)
        self.label_13 = wx.StaticText(self.panel_1, wx.ID_ANY, _("SMS Settings"))
        self.label_17 = wx.StaticText(self.panel_1, wx.ID_ANY, _("Enable SMS"))
        self.choice_1 = wx.Choice(self.panel_1, wx.ID_ANY, choices=[_("Yes"), _("No")])
        self.label_18 = wx.StaticText(self.panel_1, wx.ID_ANY, _("Enable Password Protection"))
        self.choice_2 = wx.Choice(self.panel_1, wx.ID_ANY, choices=[_("Yes"), _("No")])
        self.label_19 = wx.StaticText(self.panel_1, wx.ID_ANY, _("SMS ID"))
        self.text_ctrl_id = wx.TextCtrl(self.panel_1, wx.ID_ANY, "")
        self.label_20 = wx.StaticText(self.panel_1, wx.ID_ANY, _("SMS Key "))
        self.text_ctrl_key = wx.TextCtrl(self.panel_1, wx.ID_ANY, "")
        self.button_cancel2 = wx.Button(self.panel_1, wx.ID_ANY, _("Cancel"))
        self.button_save = wx.Button(self.panel_1, wx.ID_ANY, _("Save"))

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_COMBOBOX, self.on_combo_staff, self.combo_box_staff)
        self.Bind(wx.EVT_COMBOBOX, self.on_combo_year, self.combo_box_year)
        self.Bind(wx.EVT_COMBOBOX, self.on_combo_class, self.combo_box_class)
        self.Bind(wx.EVT_COMBOBOX, self.on_combo_div, self.combo_box_div)
        self.Bind(wx.EVT_BUTTON, self.on_button_add_contacts, self.button_add_contacts)
        self.Bind(wx.EVT_BUTTON, self.on_button_back, self.button_back)
        self.Bind(wx.EVT_BUTTON, self.on_button_clear_all, self.button_clear_all)
        self.Bind(wx.EVT_BUTTON, self.on_button_close, self.button_close)
        self.Bind(wx.EVT_BUTTON, self.on_button_next, self.button_next)
        self.Bind(wx.EVT_BUTTON, self.on_button_send, self.button_send)
        self.Bind(wx.EVT_TEXT_ENTER, self.on_sms_enter, self.text_ctrl_sms)
        self.Bind(wx.EVT_TEXT, self.on_sms_text, self.text_ctrl_sms)
        self.Bind(wx.EVT_TEXT, self.on_current_pass_text, self.text_ctrl_current_pass)
        self.Bind(wx.EVT_TEXT, self.on_new_pass_text, self.text_ctrl_new_pass)
        self.Bind(wx.EVT_TEXT, self.on_confirm_pass_text, self.text_ctrl_confirm_pass)
        self.Bind(wx.EVT_BUTTON, self.on_button_cance2, self.button_cancel2)
        self.Bind(wx.EVT_BUTTON, self.on_button_save, self.button_save)
        self.Bind(wx.EVT_NOTEBOOK_PAGE_CHANGED, self.on_page_change, self.notebook_1)
        
        
        self.Bind(wx.EVT_TEXT, self.on_sending_list_text, self.text_ctrl_selected_contacts)
        self.Bind(wx.EVT_BUTTON,self.on_change_passwd,self.button_change)
        self.Bind(wx.EVT_BUTTON,self.on_button_cancel,self.button_cancel)
        self.Bind(wx.EVT_BUTTON,self.on_button_cancel2,self.button_cancel2)
        
        self.text_ctrl_selected_contacts.Bind(wx.EVT_KEY_DOWN, self.on_keydown_contacts)
        self.text_ctrl_id.Bind(wx.EVT_KEY_UP, self.on_keydown_sms_id)
        
        
        self.Bind(wx.EVT_SHOW,self.on_show)
        
        
        
        #self.Bind(wx.EVT_LIST_COL_CLICK, self.on_check, self.checklist_ctrl_1)
        self.checklist_ctrl_1.OnCheckItem = self.on_check
        #self.Bind(wx.EVT_LIST_COL_CLICK, self.on_check, self.checklist_ctrl_1)
        # end wxGlade
        
        #self.on_show(None)
        
        
        self.first_run=True
        self.YEAR=''
        self.DB=db_operations()
        self.E=my_encryption()
        self.SENDING_LIST=[]
        self.NO_MOBILE_LIST=[]
        self.checked_indexes=[]
        
    
    
        
        
        
    def __set_properties(self):
        # begin wxGlade: sms_dialog.__set_properties
        self.SetTitle(_("SMS "))
        self.SetSize((1262, 707))
        self.SetBackgroundColour(wx.Colour(47, 47, 47))
        self.combo_box_staff.SetMinSize((200, 30))
        self.combo_box_staff.SetBackgroundColour(wx.Colour(143, 188, 143))
        self.combo_box_staff.SetSelection(0)
        self.combo_box_year.SetMinSize((200, 30))
        self.combo_box_class.SetMinSize((200, 30))
        self.combo_box_div.SetMinSize((200, 30))
        self.checklist_ctrl_1.SetMinSize((700,300))
        self.button_add_contacts.SetMinSize((120, 40))
        self.button_add_contacts.SetBackgroundColour(wx.Colour(33, 137, 33))
        self.button_add_contacts.SetForegroundColour(wx.Colour(255, 255, 255))
        self.text_ctrl_selected_contacts.SetMinSize((700, 80))
        self.button_clear_all.SetMinSize((120, 40))
        self.button_clear_all.SetBackgroundColour(wx.Colour(33, 137, 33))
        self.button_clear_all.SetForegroundColour(wx.Colour(255, 255, 255))
        self.button_close.SetMinSize((120, 40))
        self.button_close.SetBackgroundColour(wx.Colour(33, 137, 33))
        self.button_close.SetForegroundColour(wx.Colour(255, 255, 255))
        self.button_next.SetMinSize((120, 40))
        self.button_next.SetBackgroundColour(wx.Colour(33, 137, 33))
        self.button_next.SetForegroundColour(wx.Colour(255, 255, 255))
        self.pane_sms.SetBackgroundColour(wx.Colour(47, 47, 47))
        self.label_id.SetForegroundColour(wx.Colour(255, 255, 255))
        self.label_id.SetFont(wx.Font(12, wx.DEFAULT, wx.ITALIC, wx.BOLD, 0, ""))
        self.text_ctrl_sms.SetMinSize((550, 300))
        self.label_characters.SetForegroundColour(wx.Colour(255, 255, 255))
        self.label_sms_required.SetForegroundColour(wx.Colour(255, 255, 255))
        self.button_back.SetMinSize((120, 40))
        self.button_back.SetBackgroundColour(wx.Colour(33, 137, 33))
        self.button_back.SetForegroundColour(wx.Colour(255, 255, 255))
        self.button_send.SetMinSize((120, 40))
        self.button_send.SetBackgroundColour(wx.Colour(33, 137, 33))
        self.button_send.SetForegroundColour(wx.Colour(255, 255, 255))
        self.pane_send2.SetBackgroundColour(wx.Colour(47, 47, 47))
        self.label_6.SetForegroundColour(wx.Colour(255, 255, 255))
        self.label_6.SetFont(wx.Font(15, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.text_ctrl_report.SetMinSize((750, 500))
        self.panel_3.SetBackgroundColour(wx.Colour(47, 47, 47))
        self.pane_report.SetBackgroundColour(wx.Colour(249, 249, 248))
        self.label_balance.SetForegroundColour(wx.Colour(255, 255, 255))
        self.label_balance.SetFont(wx.Font(13, wx.DEFAULT, wx.ITALIC, wx.BOLD, 0, ""))
        self.label_extra.SetForegroundColour(wx.Colour(255, 255, 255))
        self.label_extra.SetFont(wx.Font(13, wx.DEFAULT, wx.ITALIC, wx.BOLD, 0, ""))
        self.panel_4.SetBackgroundColour(wx.Colour(47, 47, 47))
        self.panel_4.SetForegroundColour(wx.Colour(255, 0, 0))
        self.label_7.SetForegroundColour(wx.Colour(255, 255, 255))
        self.text_ctrl_current_pass.SetMinSize((250, 33))
        self.label_8.SetForegroundColour(wx.Colour(255, 255, 255))
        self.text_ctrl_new_pass.SetMinSize((250, 33))
        self.label_9.SetForegroundColour(wx.Colour(255, 255, 255))
        self.text_ctrl_confirm_pass.SetMinSize((250, 33))
        self.button_cancel.SetMinSize((140, 38))
        self.button_cancel.SetBackgroundColour(wx.Colour(33, 137, 33))
        self.button_cancel.SetForegroundColour(wx.Colour(255, 255, 255))
        self.button_change.SetMinSize((140, 38))
        self.button_change.SetBackgroundColour(wx.Colour(33, 137, 33))
        self.button_change.SetForegroundColour(wx.Colour(255, 255, 255))
        self.panel_5.SetBackgroundColour(wx.Colour(47, 47, 47))
        self.label_13.SetForegroundColour(wx.Colour(255, 255, 255))
        self.label_13.SetFont(wx.Font(15, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.label_17.SetForegroundColour(wx.Colour(255, 255, 255))
        self.choice_1.SetSelection(0)
        self.label_18.SetForegroundColour(wx.Colour(255, 255, 255))
        self.choice_2.SetSelection(0)
        self.label_19.SetForegroundColour(wx.Colour(255, 255, 255))
        self.text_ctrl_id.SetMinSize((250, 33))
        self.label_20.SetForegroundColour(wx.Colour(255, 255, 255))
        self.text_ctrl_key.SetMinSize((250, 33))
        self.button_cancel2.SetMinSize((120, 40))
        self.button_cancel2.SetBackgroundColour(wx.Colour(33, 137, 33))
        self.button_cancel2.SetForegroundColour(wx.Colour(255, 255, 255))
        self.button_save.SetMinSize((120, 40))
        self.button_save.SetBackgroundColour(wx.Colour(33, 137, 33))
        self.button_save.SetForegroundColour(wx.Colour(255, 255, 255))
        self.panel_1.SetBackgroundColour(wx.Colour(47, 47, 47))
        self.notebook_1.SetMinSize((400, 295))
        self.notebook_1.SetBackgroundColour(wx.Colour(33, 137, 33))
        self.notebook_1.SetForegroundColour(wx.Colour(255, 255, 255))
        # end wxGlade
        
        self.checklist_ctrl_1.InsertColumn(0, "Sl No", width=50)
        self.checklist_ctrl_1.InsertColumn(1, 'Name of Student', width=220)
        self.checklist_ctrl_1.InsertColumn(2, 'Name of Parent',width=220)
        self.checklist_ctrl_1.InsertColumn(3, 'Mobile',width=150)
        
        
        
        
        self.text_ctrl_id.SetMaxLength(3)
        
        self.pane_send2.Hide()
        self.combo_box_class.Disable()
        self.combo_box_year.Disable()
        self.combo_box_div.Disable()
        self.button_add_contacts.Disable()
        self.button_next.Disable()
        self.button_clear_all.Disable()
        self.button_send.Disable()
        self.button_change.Disable()
        self.init_checklist()

    def __do_layout(self):
        # begin wxGlade: sms_dialog.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_17 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_32 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_33 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_34 = wx.BoxSizer(wx.VERTICAL)
        sizer_35 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_4 = wx.GridSizer(5, 2, 40, 30)
        sizer_7 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_29 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_30 = wx.BoxSizer(wx.VERTICAL)
        sizer_31 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_1 = wx.GridSizer(4, 2, 40, 25)
        sizer_14 = wx.BoxSizer(wx.VERTICAL)
        sizer_15 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_16 = wx.BoxSizer(wx.VERTICAL)
        sizer_14_copy = wx.BoxSizer(wx.VERTICAL)
        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_10 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_6 = wx.BoxSizer(wx.VERTICAL)
        sizer_13 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_8 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_25 = wx.BoxSizer(wx.VERTICAL)
        sizer_37 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_3 = wx.GridSizer(1, 2, 10, 95)
        sizer_28 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_36 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_2 = wx.GridSizer(2, 2, 0, 0)
        grid_sizer_2.Add(self.combo_box_staff, 0, 0, 0)
        grid_sizer_2.Add(self.combo_box_year, 0, 0, 0)
        grid_sizer_2.Add(self.combo_box_class, 0, 0, 0)
        grid_sizer_2.Add(self.combo_box_div, 0, 0, 0)
        sizer_25.Add(grid_sizer_2, 1, wx.TOP | wx.EXPAND, 10)
        sizer_36.Add(self.checklist_ctrl_1, 1, 0, 0)
        sizer_36.Add(self.button_add_contacts, 0, wx.LEFT | wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL, 10)
        sizer_25.Add(sizer_36, 3, 0, 0)
        sizer_28.Add(self.text_ctrl_selected_contacts, 0, 0, 0)
        sizer_28.Add(self.button_clear_all, 0, wx.LEFT | wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL, 10)
        sizer_25.Add(sizer_28, 1, wx.EXPAND, 0)
        grid_sizer_3.Add(self.button_close, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3.Add(self.button_next, 0, 0, 0)
        sizer_37.Add(grid_sizer_3, 1, wx.TOP | wx.ALIGN_CENTER_VERTICAL, 10)
        sizer_25.Add(sizer_37, 1, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_3.Add(sizer_25, 1, wx.ALL | wx.EXPAND, 10)
        self.pane_sms.SetSizer(sizer_3)
        sizer_2.Add(self.label_id, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL , 18)
        sizer_2.Add(self.text_ctrl_sms, 2, wx.ALL, 20)
        sizer_2.Add(self.label_characters, 0, wx.LEFT | wx.ALIGN_RIGHT | wx.ALIGN_BOTTOM, 20)
        sizer_2.Add(self.label_sms_required, 0, wx.ALL | wx.EXPAND, 20)
        sizer_8.Add(self.button_back, 0, wx.LEFT | wx.RIGHT | wx.BOTTOM, 20)
        sizer_8.Add(self.button_send, 0, wx.LEFT | wx.RIGHT | wx.BOTTOM, 20)
        sizer_2.Add(sizer_8, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_13.Add(sizer_2, 1, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        self.pane_send2.SetSizer(sizer_13)
        sizer_6.Add(self.label_6, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_6.Add(self.text_ctrl_report, 0, wx.TOP | wx.ALIGN_CENTER_HORIZONTAL, 50)
        sizer_4.Add(sizer_6, 1, 0, 0)
        sizer_10.Add(sizer_4, 1, wx.ALIGN_CENTER_VERTICAL, 0)
        self.panel_3.SetSizer(sizer_10)
        sizer_5.Add(self.panel_3, 1, wx.EXPAND, 0)
        self.pane_report.SetSizer(sizer_5)
        sizer_14_copy.Add(self.label_balance, 0, wx.TOP | wx.BOTTOM | wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 30)
        sizer_14_copy.Add(self.label_extra, 0, wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_16.Add(sizer_14_copy, 1, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_15.Add(sizer_16, 1, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 1)
        self.panel_4.SetSizer(sizer_15)
        sizer_14.Add(self.panel_4, 1, wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        self.pane_balance.SetSizer(sizer_14)
        grid_sizer_1.Add(self.label_7, 0, wx.ALIGN_CENTER_VERTICAL, 15)
        grid_sizer_1.Add(self.text_ctrl_current_pass, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 30)
        grid_sizer_1.Add(self.label_8, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.text_ctrl_new_pass, 0, wx.ALIGN_CENTER_VERTICAL, 52)
        grid_sizer_1.Add(self.label_9, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.text_ctrl_confirm_pass, 0, wx.ALIGN_CENTER_VERTICAL, 30)
        grid_sizer_1.Add(self.button_cancel, 0, wx.RIGHT | wx.ALIGN_CENTER_HORIZONTAL, 30)
        grid_sizer_1.Add(self.button_change, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_31.Add(grid_sizer_1, 1, 0, 0)
        sizer_30.Add(sizer_31, 1, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_29.Add(sizer_30, 1, wx.ALIGN_CENTER_VERTICAL, 0)
        self.panel_5.SetSizer(sizer_29)
        sizer_7.Add(self.panel_5, 1, wx.EXPAND, 0)
        self.pane_password.SetSizer(sizer_7)
        sizer_35.Add(self.label_13, 0, wx.BOTTOM | wx.ALIGN_CENTER_HORIZONTAL, 50)
        grid_sizer_4.Add(self.label_17, 0, 0, 0)
        grid_sizer_4.Add(self.choice_1, 0, 0, 0)
        grid_sizer_4.Add(self.label_18, 0, 0, 0)
        grid_sizer_4.Add(self.choice_2, 0, 0, 0)
        grid_sizer_4.Add(self.label_19, 0, 0, 0)
        grid_sizer_4.Add(self.text_ctrl_id, 0, 0, 0)
        grid_sizer_4.Add(self.label_20, 0, 0, 0)
        grid_sizer_4.Add(self.text_ctrl_key, 0, 0, 0)
        grid_sizer_4.Add(self.button_cancel2, 0, wx.TOP | wx.ALIGN_CENTER_HORIZONTAL, 20)
        grid_sizer_4.Add(self.button_save, 0, wx.TOP | wx.ALIGN_CENTER_HORIZONTAL, 20)
        sizer_35.Add(grid_sizer_4, 1, 0, 0)
        sizer_34.Add(sizer_35, 1, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_33.Add(sizer_34, 1, 0, 0)
        sizer_32.Add(sizer_33, 1, wx.ALIGN_CENTER_VERTICAL, 0)
        self.panel_1.SetSizer(sizer_32)
        sizer_17.Add(self.panel_1, 1, wx.EXPAND, 0)
        self.pane_settings.SetSizer(sizer_17)
        self.notebook_1.AddPage(self.pane_sms, _("Send"))
        self.notebook_1.AddPage(self.pane_send2, _("Send"))
        self.notebook_1.AddPage(self.pane_report, _("Reports"))
        self.notebook_1.AddPage(self.pane_balance, _("SMS Balance"))
        self.notebook_1.AddPage(self.pane_password, _("SMS Password"))
        self.notebook_1.AddPage(self.pane_settings, _("Settings"))
        sizer_1.Add(self.notebook_1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade
    def on_show(self,event):
        
        if not self.first_run:
            print "not first"
            event.Skip()
            return 0
        
        # the script below will run only on the first run for show event is evoked servral times during a paint
        self.first_run=False
        print "show"
        
        self.Hide()
        cancelled=False
        
        while (not cancelled):
            
            dialog=password_dialog(self)
            dialog.ShowModal()
            password=dialog.password_text
            cancelled=dialog.cancelled
            dialog.Destroy()
            
            if not cancelled and self.E.Encrypt_Password(password)==self.DB.Get_SMS_Password():
                
                wx.FutureCall(1000,self.Show())
                wx.CallAfter(self.Show)
                print "passwrd match"
                event.Skip()
                
                break
            else:
                msg=" Wrong password"
                dlg = wx.MessageDialog(self, msg, 'Error',wx.OK | wx.ICON_ERROR)                  
                dlg.ShowModal()
                
                dlg.Destroy()
        
    def on_combo_staff(self, event):  # wxGlade: sms_dialog.<event_handler>
        
        self.checklist_ctrl_1.DeleteAllItems()
        if self.combo_box_staff.GetSelection()==2: # if student is selected
            
            self.load_year()
            self.combo_box_year.Enable(True)
        else:
            self.combo_box_year.Clear()
            self.combo_box_year.Append('Select Year')  
            self.combo_box_year.SetSelection(0)
            self.combo_box_class.SetSelection(0)
            self.combo_box_div.Clear()
            self.combo_box_div.Append('Select Division')  
            self.combo_box_div.SetSelection(0)
            self.combo_box_year.Enable(False)
            self.combo_box_class.Enable(False)
            self.combo_box_div.Enable(False)
            self.load_staff_info()
        event.Skip()

    def on_combo_year(self, event):  # wxGlade: sms_dialog.<event_handler>
        self.checklist_ctrl_1.DeleteAllItems()
        if self.combo_box_year.GetStringSelection()!="Select Year":
            
            self.YEAR=self.combo_box_year.Value.split('-')[0]
            self.combo_box_class.SetSelection(0)
            self.combo_box_div.Clear()
            self.combo_box_div.Append('Select Division') 
            self.combo_box_div.SetSelection(0)
            self.combo_box_div.Enable(False)
            
            
            self.combo_box_class.Enable(True)
        else:
            self.combo_box_div.Clear()
            self.combo_box_div.Append('Select Division')  
            self.combo_box_div.SetSelection(0)
            self.combo_box_class.SetSelection(0)
            self.combo_box_class.Enable(False)
            self.combo_box_div.Enable(False)
      
        event.Skip()

    def on_combo_class(self, event):  # wxGlade: sms_dialog.<event_handler>
        
        self.checklist_ctrl_1.DeleteAllItems()
        if self.combo_box_class.GetStringSelection()!="Select Standard":
            self.CLASS=self.combo_box_class.Value
            self.combo_box_div.Clear()
           
            self.load_div()
            self.combo_box_div.SetSelection(0)
            self.combo_box_div.Enable(True)
        else:
            self.combo_box_div.Clear()
            self.combo_box_div.Append('Select Division')  
            self.combo_box_div.SetSelection(0)
            
            self.combo_box_div.Enable(False)
        
        event.Skip()

    def on_combo_div(self, event):  # wxGlade: sms_dialog.<event_handler>
        
        self.DIV=self.combo_box_div.Value
        
       
        if self.combo_box_div.GetStringSelection()!="Select Division":
            
            print self.YEAR,self.CLASS,self.DIV
            
            self.load_students_info()
            
        event.Skip()
        
    def on_change_passwd(self,event):
        print self.text_ctrl_new_pass.Value,self.text_ctrl_new_pass.Value
        if self.text_ctrl_confirm_pass.Value!=self.text_ctrl_new_pass.Value:
            
            msg="Passwords do not match"
            
            dlg = wx.MessageDialog(self, msg, 'Saved',wx.OK | wx.ICON_ERROR)                  
            dlg.ShowModal()
            dlg.Destroy()
            return 0
        
        current_password=self.DB.Get_SMS_Password()
        current_pass_entered=self.E.Encrypt_Password(self.text_ctrl_current_pass.Value)
        print current_password,current_pass_entered
        if current_password!=current_pass_entered:
            msg="Wrong Password"
            dlg = wx.MessageDialog(self, msg, 'Error',wx.OK | wx.ICON_ERROR)                  
            dlg.ShowModal()
            dlg.Destroy()
            return 0
        try:
            self.DB.Set_SMS_Password(self.text_ctrl_new_pass.Value)
            msg="Password changed successfully"
            dlg = wx.MessageDialog(self, msg, 'Success',wx.OK | wx.ICON_INFORMATION)                  
            dlg.ShowModal()
            dlg.Destroy()
        except:
            msg="Could not change password"
            dlg = wx.MessageDialog(self, msg, 'Error',wx.OK | wx.ICON_ERROR)                  
            dlg.ShowModal()
            dlg.Destroy()
    def on_button_add_contacts(self, event):  # wxGlade: sms_dialog.<event_handler>
        
        text=''
        for i in self.checked_indexes:
            text+=self.checklist_ctrl_1.GetItem(i,3).GetText()+";"
            
            
        
        
        self.text_ctrl_selected_contacts.SetValue(text)
        event.Skip()

    def on_button_clear_all(self, event):  # wxGlade: sms_dialog.<event_handler>
        self.text_ctrl_selected_contacts.SetValue('')
        event.Skip()
    def on_button_cancel2(self,event):
        self.Close()
    def on_button_cancel(self,event):
        self.Close()
    def on_button_close(self, event):  # wxGlade: sms_dialog.<event_handler>
        self.Close(True)
        event.Skip()

    def on_button_next(self, event):  # wxGlade: sms_dialog.<event_handler>
        
        if self.validate_mobile():
            self.pane_send2.Show()
            self.pane_send2.SetFocus()
            self.pane_sms.Hide()
            self.notebook_1.SetSelection(1)
        
        event.Skip()
        
    def on_button_back(self,event):
        
        self.pane_sms.Show()
        
        self.notebook_1.SetSelection(0)
        self.pane_send2.Hide()
        
        
        event.Skip()
    def on_button_send(self,event):
        
        
        if self.DB.Is_SMS_Enabled()=='N':
            msg=" SMS facility is disabled. Go to settings to enable SMS"
            dlg = wx.MessageDialog(self, msg, 'Saved',wx.OK | wx.ICON_INFORMATION)                  
            dlg.ShowModal()
            dlg.Destroy()
            return 0
        
        if self.DB.Is_SMS_Protected()=='Y':
            
            
            cancelled=False
            while (not cancelled):
                
                dialog=password_dialog(self)
                dialog.ShowModal()
                password=dialog.password_text
                cancelled=dialog.cancelled
                dialog.Destroy()
                
                if not cancelled and self.E.Encrypt_Password(password)==self.DB.Get_SMS_Password():
                    self.send_sms()
                    
                    return 0
                else:
                    msg=" Wrong password"
                    dlg = wx.MessageDialog(self, msg, 'Error',wx.OK | wx.ICON_ERROR)                  
                    dlg.ShowModal()
                    dlg.Destroy()
            
    def on_sms_enter(self, event):  # wxGlade: sms_dialog.<event_handler>
        print "Event handler 'on_sms_enter' not implemented!"
        event.Skip()

    def on_sms_text(self, event):  # wxGlade: sms_dialog.<event_handler>
        text=self.text_ctrl_sms.Value
        if text:
            self.button_send.Enable(True)
            
            pages=len(text)/self.SMS_LENGTH
            count=self.SMS_LENGTH-(len(text)%self.SMS_LENGTH)
            self.label_characters.SetLabel(str(count)+"/"+str(pages+1))
            
            
            label="Number of sms required to complete the operarion: "
            self.label_sms_required.SetLabel(label+str(len(self.SENDING_LIST)*(pages+1)))
        else:
            self.button_send.Enable(False)
        event.Skip()
        
    def on_keydown_contacts(self,event):
        keycode=event.GetKeyCode()
        if keycode==wx.WXK_BACK or keycode==wx.WXK_CANCEL or keycode==wx.WXK_CLEAR or keycode==wx.WXK_DELETE or keycode==wx.WXK_DOWN or keycode==wx.WXK_END or keycode==wx.WXK_LBUTTON :
        
            event.Skip()
            return 0
        elif keycode==wx.WXK_NUMPAD_END or keycode==wx.WXK_NUMPAD_NEXT or keycode==wx.WXK_NUMPAD_RIGHT or keycode==wx.WXK_RIGHT or keycode==wx.WXK_LEFT or keycode==wx.WXK_NEXT or keycode==wx.WXK_NUMPAD_DELETE or keycode==wx.WXK_NUMPAD_LEFT:
            event.Skip()
            return 0
        
        character=chr(keycode)
        if character.isdigit() or character==';':
            event.Skip()
    def on_keydown_sms_id(self,event):
       
        ins_point= self.text_ctrl_id.GetInsertionPoint()
        
        self.text_ctrl_id.SetValue(self.text_ctrl_id.Value.upper())
        self.text_ctrl_id.SetInsertionPoint(ins_point)
        event.Skip()
    def on_sending_list_text(self,event):
        
        if self.text_ctrl_selected_contacts.GetValue():
            
            self.button_clear_all.Enable()
            self.button_next.Enable()
        else:
            self.button_clear_all.Enable(False)
            self.button_next.Enable(False)
    def on_current_pass_text(self, event):  # wxGlade: sms_dialog.<event_handler>
        if self.text_ctrl_confirm_pass.Value and self.text_ctrl_current_pass.Value and self.text_ctrl_new_pass.Value:
            self.button_change.Enable(True)
        else:
            self.button_change.Disable()
        event.Skip()

    def on_new_pass_text(self, event):  # wxGlade: sms_dialog.<event_handler>
        if self.text_ctrl_confirm_pass.Value and self.text_ctrl_current_pass.Value and self.text_ctrl_new_pass.Value:
            self.button_change.Enable(True)
        else:
            self.button_change.Disable()
        event.Skip()

    def on_confirm_pass_text(self, event):  # wxGlade: sms_dialog.<event_handler>
        if self.text_ctrl_confirm_pass.Value and self.text_ctrl_current_pass.Value and self.text_ctrl_new_pass.Value:
            self.button_change.Enable(True)
        else:
            self.button_change.Disable()
        event.Skip()

    def on_button_cance2(self, event):  # wxGlade: sms_dialog.<event_handler>
        self.Close()
        event.Skip()

    def on_button_save(self, event):  # wxGlade: sms_dialog.<event_handler>
        try:
            sms_key=self.text_ctrl_key.GetValue()        
            sms_id=self.text_ctrl_id.GetValue()
            
            if self.choice_1.GetSelection()==0:
                
                self.DB.Enable_SMS()
            else:
                
                self.DB.Disable_SMS()
            
            
            if self.choice_2.GetSelection()==0:
                
                self.DB.Enable_Protection()
            else:
                
                self.DB.Disable_Protection()
            self.DB.Set_SMS_Key(sms_key)
            self.DB.Set_SMS_ID(sms_id)
            
            msg=" Successfully Saved"
            dlg = wx.MessageDialog(self, msg, 'Saved',wx.OK | wx.ICON_INFORMATION)                  
            dlg.ShowModal()
            dlg.Destroy()
        except:
            msg=" Could not save"
            dlg = wx.MessageDialog(self, msg, 'Error',wx.OK | wx.ICON_ERROR)                  
            dlg.ShowModal()
            dlg.Destroy()
        event.Skip()

    def on_page_change(self, event):  # wxGlade: sms_dialog.<event_handler>
        if self.notebook_1.GetSelection()==5:
            self.load_settings()
        elif self.notebook_1.GetSelection()==1:
            self.load_send2_tab()
        
        event.Skip()
    def on_check(self,index,flag):    #index is of the item selected, flag is boolean if selected or not
        
        self.checked_indexes=[]
        if index==0 and flag==True:
                
            self.check_all()
                
        if index==0 and flag==False:
            
            self.uncheck_all()
        
        # Updating the tuple of checked item indexes
        num = self.checklist_ctrl_1.GetItemCount()
        for i in range(num):
            
            if self.checklist_ctrl_1.IsChecked(i):
                self.checked_indexes.append(i)
                
        if len(self.checked_indexes)>0:
            self.button_add_contacts.Enable(True)
        else:
            self.button_add_contacts.Enable(False)
        
        
        
    def init_checklist(self):
        
        
        pass
    def load_year(self):
        self.combo_box_year.Clear()
        self.combo_box_div.Clear()
        years=self.DB.get_academic_year_list()
        years.insert(0,"Select Year")

        
        for item in years:
            self.combo_box_year.Append(str(item))
            
        self.combo_box_year.SetSelection(0) 
        self.combo_box_class.SetSelection(0) 
        
    def load_div(self):
        # token 1 for one set of combos...token 2 for the other set
        self.combo_box_div.Clear()
            
        divs=self.DB.Get_Div(self.YEAR,self.CLASS)
        divs=['Select Division']+divs
        
        for item in divs:
            self.combo_box_div.Append(str(item))   
    def load_staff_info(self):
        self.checklist_ctrl_1.DeleteAllItems()
        self.SENDING_LIST=[]
        self.NO_MOBILE_LIST=[]
        
        self.checklist_ctrl_1.DeleteAllColumns()
        self.checklist_ctrl_1.InsertColumn(0, "Sl No", width=50)
        self.checklist_ctrl_1.InsertColumn(1, 'Name of Staff', width=220)
        self.checklist_ctrl_1.InsertColumn(2, 'Designation',width=220)
        self.checklist_ctrl_1.InsertColumn(3, 'Mobile',width=150)
        
        self.temp_list=self.DB.Get_Staff_Info()
        V=validate()
        
        for each in self.temp_list:
            
            mobile=each[2]
            if not each[2]:mobile=''
            #print "mob",mobile,"        ",self.validate_mobile(mobile,silent=True)
            if mobile and V.validate_mobile(mobile)[0]:
                
                if not each[1]:each[1]=''
                
                self.SENDING_LIST.append([each[0],each[1],mobile])
            else:
                
                self.NO_MOBILE_LIST.append(each[0])
          
        i= 0    
        
            
        for each in self.SENDING_LIST:
           
            
                
            
            
            if i==0:
                index = self.checklist_ctrl_1.InsertStringItem(0,'')
            
                self.checklist_ctrl_1.SetStringItem(index, 1, "Select All")
                i+=1
                #continue
                
            index = self.checklist_ctrl_1.InsertStringItem(sys.maxint, each[0])
            self.checklist_ctrl_1.SetStringItem(index, 0, str(i))
            self.checklist_ctrl_1.SetStringItem(index, 1, each[0])
            self.checklist_ctrl_1.SetStringItem(index, 2, each[1])
            self.checklist_ctrl_1.SetStringItem(index, 3, each[2])
            
            i+=1
    
    def load_students_info(self):
        
        #if self.checklist_ctrl_1.GetItemCount():
        self.checklist_ctrl_1.DeleteAllItems()
        self.SENDING_LIST=[]
        self.NO_MOBILE_LIST=[]
        
        #Updating colum headers
        self.checklist_ctrl_1.DeleteAllColumns()
        self.checklist_ctrl_1.InsertColumn(0, "Sl No", width=50)
        self.checklist_ctrl_1.InsertColumn(1, 'Name of Student', width=220)
        self.checklist_ctrl_1.InsertColumn(2, 'Name of Parent',width=220)
        self.checklist_ctrl_1.InsertColumn(3, 'Mobile',width=150)
        #end of updation
        
        
        self.temp_list=self.DB.Get_Student_List(self.YEAR,self.combo_box_class.Value,self.combo_box_div.Value)
        
        V=validate()
        for each in self.temp_list:
            
            mobile=self.DB.Get_Mobile(each[1])
            #print "mob",mobile,"        ",self.validate_mobile(mobile,silent=True)
            if mobile and V.validate_mobile(mobile)[0]:
                
                father=self.DB.Get_Father(each[1])
                self.SENDING_LIST.append([each[2],father,mobile])
            else:
                
                self.NO_MOBILE_LIST.append(each[2])
          
        i= 0    
        
            
        for each in self.SENDING_LIST:
           
            
                
            
            
            if i==0:
                index = self.checklist_ctrl_1.InsertStringItem(0,'')
            
                self.checklist_ctrl_1.SetStringItem(index, 1, "Select All")
                i+=1
                #continue
                
            index = self.checklist_ctrl_1.InsertStringItem(sys.maxint, each[0])
            self.checklist_ctrl_1.SetStringItem(index, 0, str(i))
            self.checklist_ctrl_1.SetStringItem(index, 1, each[0])
            self.checklist_ctrl_1.SetStringItem(index, 2, each[1])
            self.checklist_ctrl_1.SetStringItem(index, 3, each[2])
            
            i+=1
    
    def check_all(self):
        
        num = self.checklist_ctrl_1.GetItemCount()
        for i in range(num):
            self.checklist_ctrl_1.CheckItem(i)
            
    def uncheck_all(self):
        
        num = self.checklist_ctrl_1.GetItemCount()
        for i in range(num):
            self.checklist_ctrl_1.CheckItem(i,False)
            
    def validate_mobile(self):
        
        self.SENDING_LIST=[]
        V=validate()
        sending_numbers=self.text_ctrl_selected_contacts.Value
        sending_numbers=sending_numbers.split(";")
        
        for mobile in sending_numbers:
            
            if not mobile:
                continue
            
            if V.validate_mobile(mobile)[0]:
                self.SENDING_LIST.append(mobile)
                
            else:
                
                msg=mobile+" is invalid mobile number. Either edit it or delete to continue!"
                dlg = wx.MessageDialog(self, msg, 'Error',wx.OK | wx.ICON_ERROR)                  
                dlg.ShowModal()
                dlg.Destroy()
                
                return 0
            
        return True
                
    def load_settings(self):
        
        
        sms_key=self.DB.Get_SMS_Key()
        sms_id=self.DB.Get_SMS_ID()
        is_enabled=self.DB.Is_SMS_Enabled()
        is_protected=self.DB.Is_SMS_Protected()
        
        print sms_key,sms_id,is_enabled,is_protected
        self.text_ctrl_key.SetValue(sms_key)
        self.text_ctrl_id.SetValue(sms_id)
        if is_enabled=='N':
            self.choice_1.SetSelection(1)
        else:
            self.choice_1.SetSelection(0)
            
        if is_protected=='N':
            self.choice_2.SetSelection(1)
        else:
            self.choice_2.SetSelection(0)
    def send_sms(self):
        
        
        print "sending",self.NO_MOBILE_LIST
        
        if  self.NO_MOBILE_LIST:
            
            
            
            msg="The following Student(s) got no valid mobile numbers. Go to Student Profile to add/edit mobile numbers\n"
            
            no=0
            
            for pupil in self.NO_MOBILE_LIST:
                no+=1
                msg+=str(no)+".  "+str(pupil)+"\n"
                
            #app = wx.PySimpleApp(0)
       
            dlg = wx.MessageDialog(None, msg,"No Mobile Number",wx.OK | wx.ICON_INFORMATION)
            dlg.ShowModal()
            dlg.Destroy()
        
    def load_send2_tab(self):
        self.label_id.SetLabel("ID:"+self.DB.Get_SMS_ID())
        print "label id"
        print self.label_id.GetLabel()
    
# end of class sms_dialog
if __name__ == "__main__":
    gettext.install("app") # replace with the appropriate catalog name

    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame_1 = sms_dialog(None, wx.ID_ANY, "")
    frame_1.ShowModal()
    frame_1.Destroy()
    app.SetTopWindow(frame_1)
    frame_1.Show()
    app.MainLoop()
    