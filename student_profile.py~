#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.6.8 on Sun Sep 11 13:05:28 2016
#



import wx

# begin wxGlade: dependencies
import gettext
# end wxGlade

# begin wxGlade: extracode
# end wxGlade
import os,sys
from dboperations import db_operations
from validations import validate


class student_profile(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: student_profie.__init__
        kwds["style"] = wx.CAPTION | wx.CLOSE_BOX | wx.MINIMIZE_BOX | wx.MAXIMIZE | wx.MAXIMIZE_BOX | wx.SYSTEM_MENU | wx.RESIZE_BORDER | wx.CLIP_CHILDREN
        wx.Dialog.__init__(self, *args, **kwds)
        self.panel_1 = wx.Panel(self, wx.ID_ANY, style=wx.RAISED_BORDER | wx.TAB_TRAVERSAL)
        self.label_13 = wx.StaticText(self.panel_1, wx.ID_ANY, ("Year"))
        self.label_14 = wx.StaticText(self.panel_1, wx.ID_ANY, ("Stadard"))
        self.combo_box_year = wx.ComboBox(self.panel_1, wx.ID_ANY, choices=[], style=wx.CB_DROPDOWN | wx.CB_DROPDOWN | wx.CB_READONLY | wx.CB_SORT)
        self.combo_box_class = wx.ComboBox(self.panel_1, wx.ID_ANY, choices=["Select Standard","8","9","10"], style=wx.CB_DROPDOWN | wx.CB_DROPDOWN | wx.CB_READONLY | wx.CB_SORT)
        self.label_16 = wx.StaticText(self.panel_1, wx.ID_ANY, ("Division"))
        self.label_17 = wx.StaticText(self.panel_1, wx.ID_ANY, ("Student List"))
        self.combo_box_div = wx.ComboBox(self.panel_1, wx.ID_ANY, choices=[], style=wx.CB_DROPDOWN | wx.CB_DROPDOWN | wx.CB_READONLY | wx.CB_SORT)
        self.combo_box_adno = wx.ComboBox(self.panel_1, wx.ID_ANY, choices=[""], style=wx.CB_DROPDOWN | wx.CB_DROPDOWN)
        cur_dir=os.path.dirname(os.path.abspath((sys.argv[0])))

        self.bitmap_photo = wx.BitmapButton(self.panel_1, wx.ID_ANY, wx.Bitmap(cur_dir+"/Resources/img/browse.jpg", wx.BITMAP_TYPE_ANY))
        self.static_line_1 = wx.StaticLine(self.panel_1, wx.ID_ANY)
        self.button_add = wx.Button(self.panel_1, wx.ID_ANY, ("Add New Student"))
        self.static_line_3 = wx.StaticLine(self.panel_1, wx.ID_ANY)
        self.label_1 = wx.StaticText(self.panel_1, wx.ID_ANY, ("Roll No"))
        self.label_2 = wx.StaticText(self.panel_1, wx.ID_ANY, ("Name"))
        self.label_3 = wx.StaticText(self.panel_1, wx.ID_ANY, ("UID"))
        self.text_ctrl_roll = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
        self.text_ctrl_name = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
        self.text_ctrl_uid = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
        self.label_4 = wx.StaticText(self.panel_1, wx.ID_ANY, ("Gender"))
        self.label_5 = wx.StaticText(self.panel_1, wx.ID_ANY,("Date of Birth"))
        self.label_6 = wx.StaticText(self.panel_1, wx.ID_ANY,("Category"))
        self.combo_box_gender = wx.ComboBox(self.panel_1, wx.ID_ANY, choices=[("Select"), ("M"), ("F"), ("N")], style=wx.CB_DROPDOWN | wx.CB_DROPDOWN | wx.CB_READONLY | wx.CB_SORT)
        self.text_ctrl_dob = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
        self.text_ctrl_category = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
        self.label_7 = wx.StaticText(self.panel_1, wx.ID_ANY, ("Religion"))
        self.label_8 = wx.StaticText(self.panel_1, wx.ID_ANY, ("Caste"))
        self.label_9 = wx.StaticText(self.panel_1, wx.ID_ANY, ("Language"))
        self.text_ctrl_religion = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
        self.text_ctrl_caste = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
        self.text_ctrl_language = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
        self.label_10 = wx.StaticText(self.panel_1, wx.ID_ANY, ("Father"))
        self.label_11 = wx.StaticText(self.panel_1, wx.ID_ANY, ("Mother"))
        self.label_12 = wx.StaticText(self.panel_1, wx.ID_ANY, ("Mobile"))
        self.text_ctrl_father = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
        self.text_ctrl_mother = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
        self.text_ctrl_mobile = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
        self.label_18 = wx.StaticText(self.panel_1, wx.ID_ANY, ("Email"))
        self.text_ctrl_email = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
        self.hyperlink_2 = wx.HyperlinkCtrl(self.panel_1, wx.ID_ANY, "", "")
        self.hyperlink_3 = wx.HyperlinkCtrl(self.panel_1, wx.ID_ANY, "", "")
        self.static_line_2 = wx.StaticLine(self.panel_1, wx.ID_ANY)
        self.button_close = wx.Button(self.panel_1, wx.ID_ANY, ("&Close"))
        self.button_delete = wx.Button(self.panel_1, wx.ID_ANY, ("&Delete"))
        self.button_save = wx.Button(self.panel_1, wx.ID_SAVE, "Edit")
        
        self.__set_properties()
        self.__do_layout()

        
        
        self.Bind(wx.EVT_COMBOBOX, self.on_year, self.combo_box_year)
        self.Bind(wx.EVT_COMBOBOX, self.on_class, self.combo_box_class)
        self.Bind(wx.EVT_COMBOBOX, self.on_div, self.combo_box_div)
        self.Bind(wx.EVT_TEXT, self.on_adno_edit, self.combo_box_adno)
        self.Bind(wx.EVT_COMBOBOX, self.on_student_list, self.combo_box_adno)
        self.Bind(wx.EVT_BUTTON, self.on_photo, self.bitmap_photo)
        #self.Bind(wx.EVT_TEXT_ENTER, self.on_name_text, self.text_ctrl_roll)
        #self.Bind(wx.EVT_TEXT, self.on_name_text, self.text_ctrl_roll)
        #self.Bind(wx.EVT_TEXT_ENTER, self.on_name_text, self.text_ctrl_name)
        #self.Bind(wx.EVT_TEXT, self.on_name_text, self.text_ctrl_name)
        #self.Bind(wx.EVT_TEXT_ENTER, self.on_uid_enter, self.text_ctrl_uid)
        #self.Bind(wx.EVT_TEXT, self.on_uid_text, self.text_ctrl_uid)
        self.Bind(wx.EVT_COMBOBOX, self.on_gender__change, self.combo_box_gender)
        #self.Bind(wx.EVT_TEXT_ENTER, self.on_category_enter, self.text_ctrl_dob)
        #self.Bind(wx.EVT_TEXT, self.on_category, self.text_ctrl_dob)
        #self.Bind(wx.EVT_TEXT_ENTER, self.on_category_enter, self.text_ctrl_category)
        '''self.Bind(wx.EVT_TEXT, self.on_category, self.text_ctrl_category)
        self.Bind(wx.EVT_TEXT_ENTER, self.on_religion_text, self.text_ctrl_religion)
        self.Bind(wx.EVT_TEXT, self.on_religion_text, self.text_ctrl_religion)
        self.Bind(wx.EVT_TEXT_ENTER, self.on_caste_enter, self.text_ctrl_caste)
        self.Bind(wx.EVT_TEXT, self.on_caste_text, self.text_ctrl_caste)
        self.Bind(wx.EVT_TEXT_ENTER, self.on_language_enter, self.text_ctrl_language)
        self.Bind(wx.EVT_TEXT, self.on_langauge_text, self.text_ctrl_language)
        self.Bind(wx.EVT_TEXT_ENTER, self.on_father_enter, self.text_ctrl_father)
        self.Bind(wx.EVT_TEXT, self.on_father_text, self.text_ctrl_father)
        self.Bind(wx.EVT_TEXT_ENTER, self.on_mother_enter, self.text_ctrl_mother)
        self.Bind(wx.EVT_TEXT, self.on_other_text, self.text_ctrl_mother)
        self.Bind(wx.EVT_TEXT_ENTER, self.on_mobile_enter, self.text_ctrl_mobile)
        self.Bind(wx.EVT_TEXT, self.on_mobile_text, self.text_ctrl_mobile)
        self.Bind(wx.EVT_TEXT_ENTER, self.on_mobile_enter, self.text_ctrl_email)
        self.Bind(wx.EVT_TEXT, self.on_mobile_text, self.text_ctrl_email)
        '''
        self.Bind(wx.EVT_BUTTON, self.on_add_new, self.button_add)
        self.Bind(wx.EVT_BUTTON, self.on_close, self.button_close)
        self.Bind(wx.EVT_BUTTON, self.on_delete, self.button_delete)
        self.Bind(wx.EVT_BUTTON, self.on_save, self.button_save)
        
        
 
        # end wxGlade
        
        self.YEAR=''
        self.current_id=0
        self.current_admission_no=''
        self.path=''
        self.prof_pic_path=''
        

        self.DB=db_operations()
        self.VALID=validate()
        self.load_year()
        self.set_editable(False) #sets all controls read only


    def __set_properties(self):
        # begin wxGlade: student_profie.__set_properties
        self.SetTitle(("Student Profile"))
        self.label_13.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.label_14.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.combo_box_year.SetMinSize((350, 35))
        self.combo_box_class.SetMinSize((350, 35))
        self.label_16.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.label_17.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.combo_box_div.SetMinSize((350, 35))
        self.combo_box_adno.SetMinSize((350, 35))
        self.combo_box_adno.SetSelection(0)
        self.bitmap_photo.SetMinSize((132, 132))
        self.button_add.SetMinSize((129, 38))
        self.button_add.SetFont(wx.Font(11, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Ubuntu"))
        self.label_1.SetFont(wx.Font(12, wx.DEFAULT, wx.ITALIC, wx.BOLD, 0, ""))
        self.label_2.SetFont(wx.Font(12, wx.DEFAULT, wx.ITALIC, wx.BOLD, 0, ""))
        self.label_3.SetFont(wx.Font(12, wx.DEFAULT, wx.ITALIC, wx.BOLD, 0, ""))
        self.text_ctrl_roll.SetMinSize((300, 35))
        self.text_ctrl_name.SetMinSize((300, 35))
        self.text_ctrl_uid.SetMinSize((300, 35))
        self.label_4.SetFont(wx.Font(12, wx.DEFAULT, wx.ITALIC, wx.BOLD, 0, ""))
        self.label_5.SetFont(wx.Font(12, wx.DEFAULT, wx.ITALIC, wx.BOLD, 0, ""))
        self.label_6.SetFont(wx.Font(12, wx.DEFAULT, wx.ITALIC, wx.BOLD, 0, ""))
        self.combo_box_gender.SetMinSize((100, 35))
        self.combo_box_gender.SetSelection(0)
        self.text_ctrl_dob.SetMinSize((300, 35))
        self.text_ctrl_category.SetMinSize((300, 35))
        self.label_7.SetFont(wx.Font(12, wx.DEFAULT, wx.ITALIC, wx.BOLD, 0, ""))
        self.label_8.SetFont(wx.Font(12, wx.DEFAULT, wx.ITALIC, wx.BOLD, 0, ""))
        self.label_9.SetFont(wx.Font(12, wx.DEFAULT, wx.ITALIC, wx.BOLD, 0, ""))
        self.text_ctrl_religion.SetMinSize((300, 35))
        self.text_ctrl_caste.SetMinSize((300, 35))
        self.text_ctrl_language.SetMinSize((300, 35))
        self.label_10.SetFont(wx.Font(12, wx.DEFAULT, wx.ITALIC, wx.BOLD, 0, ""))
        self.label_11.SetFont(wx.Font(12, wx.DEFAULT, wx.ITALIC, wx.BOLD, 0, ""))
        self.label_12.SetFont(wx.Font(12, wx.DEFAULT, wx.ITALIC, wx.BOLD, 0, ""))
        self.text_ctrl_father.SetMinSize((300, 35))
        self.text_ctrl_mother.SetMinSize((300, 35))
        self.text_ctrl_mobile.SetMinSize((300, 35))
        self.label_18.SetFont(wx.Font(12, wx.DEFAULT, wx.ITALIC, wx.BOLD, 0, ""))
        self.text_ctrl_email.SetMinSize((300, 35))
        self.static_line_2.SetMinSize((1130, 10))
        self.button_close.SetMinSize((120, 45))
        self.button_delete.SetMinSize((120, 45))
        self.button_delete.Enable(False)
        self.button_save.SetMinSize((120, 45))
        self.button_save.Enable(False)
        self.button_add.Enable(False)
        self.bitmap_photo.Enable(False)        
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: student_profie.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_1 = wx.FlexGridSizer(9, 3, 10, 10)
        grid_sizer_3 = wx.GridSizer(2, 1, 0, 0)
        grid_sizer_4 = wx.GridSizer(3, 1, 0, 0)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_2 = wx.GridSizer(4, 2, 0, 0)
        grid_sizer_2.Add(self.label_13, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_2.Add(self.label_14, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_2.Add(self.combo_box_year, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_2.Add(self.combo_box_class, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_2.Add(self.label_16, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_2.Add(self.label_17, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_2.Add(self.combo_box_div, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_2.Add(self.combo_box_adno, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_4.Add(grid_sizer_2, 1, wx.EXPAND, 0)
        sizer_4.Add(self.bitmap_photo, 0, wx.RIGHT | wx.TOP | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 15)
        sizer_2.Add(sizer_4, 2, wx.BOTTOM | wx.EXPAND, 15)
        grid_sizer_4.Add(self.static_line_1, 0, wx.EXPAND, 0)
        grid_sizer_4.Add(self.button_add, 0, wx.LEFT | wx.ALIGN_CENTER_VERTICAL, 20)
        grid_sizer_4.Add(self.static_line_3, 0, wx.EXPAND, 0)
        sizer_2.Add(grid_sizer_4, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(self.label_1, 0, wx.LEFT | wx.EXPAND, 10)
        grid_sizer_1.Add(self.label_2, 0, wx.LEFT | wx.EXPAND, 10)
        grid_sizer_1.Add(self.label_3, 0, wx.LEFT | wx.EXPAND, 10)
        grid_sizer_1.Add(self.text_ctrl_roll, 0, 0, 0)
        grid_sizer_1.Add(self.text_ctrl_name, 0, 0, 0)
        grid_sizer_1.Add(self.text_ctrl_uid, 0, 0, 0)
        grid_sizer_1.Add(self.label_4, 0, wx.LEFT | wx.EXPAND, 10)
        grid_sizer_1.Add(self.label_5, 0, wx.LEFT | wx.EXPAND, 10)
        grid_sizer_1.Add(self.label_6, 0, wx.LEFT | wx.EXPAND, 10)
        grid_sizer_1.Add(self.combo_box_gender, 0, 0, 0)
        grid_sizer_1.Add(self.text_ctrl_dob, 0, 0, 0)
        grid_sizer_1.Add(self.text_ctrl_category, 0, 0, 0)
        grid_sizer_1.Add(self.label_7, 0, wx.LEFT | wx.EXPAND, 10)
        grid_sizer_1.Add(self.label_8, 0, wx.LEFT | wx.EXPAND, 10)
        grid_sizer_1.Add(self.label_9, 0, wx.LEFT | wx.EXPAND, 10)
        grid_sizer_1.Add(self.text_ctrl_religion, 0, 0, 0)
        grid_sizer_1.Add(self.text_ctrl_caste, 0, 0, 0)
        grid_sizer_1.Add(self.text_ctrl_language, 0, 0, 0)
        grid_sizer_1.Add(self.label_10, 0, wx.LEFT | wx.EXPAND, 10)
        grid_sizer_1.Add(self.label_11, 0, wx.LEFT | wx.EXPAND, 10)
        grid_sizer_1.Add(self.label_12, 0, wx.LEFT | wx.EXPAND, 10)
        grid_sizer_1.Add(self.text_ctrl_father, 0, 0, 0)
        grid_sizer_1.Add(self.text_ctrl_mother, 0, 0, 0)
        grid_sizer_1.Add(self.text_ctrl_mobile, 0, 0, 0)
        grid_sizer_3.Add(self.label_18, 0, wx.LEFT | wx.EXPAND, 10)
        grid_sizer_3.Add(self.text_ctrl_email, 0, 0, 0)
        grid_sizer_1.Add(grid_sizer_3, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(self.hyperlink_2, 0, 0, 0)
        grid_sizer_1.Add(self.hyperlink_3, 0, 0, 0)
        grid_sizer_1.AddGrowableRow(1)
        grid_sizer_1.AddGrowableRow(3)
        grid_sizer_1.AddGrowableRow(5)
        grid_sizer_1.AddGrowableCol(0)
        grid_sizer_1.AddGrowableCol(1)
        grid_sizer_1.AddGrowableCol(2)
        sizer_2.Add(grid_sizer_1, 6, wx.ALL | wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL | wx.SHAPED, 10)
        sizer_2.Add(self.static_line_2, 0, wx.ALL | wx.EXPAND, 10)
        sizer_3.Add(self.button_close, 0, wx.RIGHT | wx.ALIGN_CENTER_HORIZONTAL, 40)
        sizer_3.Add(self.button_delete, 0, wx.RIGHT | wx.ALIGN_CENTER_HORIZONTAL, 40)
        sizer_3.Add(self.button_save, 0, wx.RIGHT | wx.ALIGN_CENTER_HORIZONTAL, 40)
        sizer_2.Add(sizer_3, 1, wx.ALIGN_BOTTOM | wx.ALIGN_CENTER_HORIZONTAL, 15)
        self.panel_1.SetSizer(sizer_2)
        sizer_1.Add(self.panel_1, 1, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 15)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
        # end wxGlade

    def on_year(self, event):  # wxGlade: student_profie.<event_handler>
        
        self.YEAR=self.combo_box_year.Value.split('-')[0]
        self.combo_box_class.SetSelection(0)
        self.combo_box_div.Clear()
        self.combo_box_div.Append('Select Division')  
        self.combo_box_div.SetSelection(0)
        self.combo_box_adno.Clear()

        #self.reset_photo(True)

        #self.check_list_box_class.Clear()
        #self.check_list_box_1.Check(0,False)
        self.clear_student_details()
        self.button_delete.Enable(False)
        self.button_save.Enable(False)
        self.button_add.Enable(False)
        self.bitmap_photo.Enable(False)
        self.add_flag=True


        
        event.Skip()

    def on_class(self, event):  # wxGlade: student_profie.<event_handler>
        self.CLASS=self.combo_box_class.Value
        self.combo_box_div.Clear()
        self.combo_box_adno.Clear()
        self.clear_student_details()
        
        self.load_div()
        self.combo_box_div.SetSelection(0)
        self.reset_photo(True)

        #self.check_list_box_class.Clear()
        #self.check_list_box_year.Check(0,False)
        self.button_save.Enable(False)
        self.button_delete.Enable(False)
        self.button_add.Enable(False)
        self.bitmap_photo.Enable(False)
        self.add_flag=False
        event.Skip()
        
        

    def on_div(self, event):  # wxGlade: student_profie.<event_handler>
        self.DIV=self.combo_box_div.Value
        self.load_admission_no()
        self.clear_student_details()
        self.button_delete.Disable()
        self.button_save.Disable()
        self.reset_photo(True)
        self.bitmap_photo.Enable(False)
        if self.combo_box_div.GetStringSelection()!="Select Division":
            self.button_add.Enable(True)
            self.add_flag=False
        event.Skip()
        

    def on_adno_edit(self, event):  # wxGlade: student_profie.<event_handler>
        "Event handler 'on_name_edit' not implemented!"
        pass
        event.Skip()

    def on_student_list(self, event):  # wxGlade: student_profie.<event_handler>
        
        # the combo box containing admission no
        self.current_admission_no=self.combo_box_adno.Value
        
        self.load_student_details()
        self.button_save.Label="Edit"
        self.add_flag=False
        self.set_editable(False)
        #self.bitmap_photo.Enable(True)
        self.Bind(wx.EVT_BUTTON, self.on_photo, self.bitmap_photo)
        #self.combo_box_adno.SetSelection(0)




        event.Skip()
    def reset_photo(self,default=False):
        
        print "changing photo"
        cur_dir=os.path.dirname(os.path.abspath((sys.argv[0])))

        
        if default:    
        
            
            path=cur_dir+"/Resources/img/browse.jpg"

        
        else:
            
            path=cur_dir+"/Resources/profile_pic/"+str(self.current_admission_no)+".jpg"
            
            if not os.path.isfile(path):
                
                path=cur_dir+"/Resources/img/browse.jpg"


        if self.path!=path:# changes only if it has changed
            self.bitmap_photo = wx.BitmapButton(self.panel_1, wx.ID_ANY,wx.Bitmap(path, wx.BITMAP_TYPE_ANY))

            #self.bitmap_photo.SetBitmapSelected( wx.Bitmap(path, wx.BITMAP_TYPE_ANY))
            selected_index=0
            print self.combo_box_adno.GetSelection()
            if self.combo_box_adno.GetSelection()>0:
                selected_index=self.combo_box_adno.GetItems().index(self.current_admission_no)
            self.__set_properties()
            self.__do_layout()
            self.combo_box_adno.SetSelection(selected_index)
            self.bitmap_photo.Enable(True)
            self.path=path
    def on_photo(self, event):  # wxGlade: student_profie.<event_handler>
        #wcd="Image Files(*.jpeg)|*.jpeg| JPG Files(*.jpg)|*.jpg| PNG Files(*.png)|*.png"
        #return 0
        print "on photo"
        wcd="Image Files(*.jpeg,*.jpg,*.png)|*.jpeg;*.jpg;*.png"
        dir = "/home"
        open_dlg = wx.FileDialog(self, message='Select Photo', defaultDir=dir, defaultFile= '', wildcard=wcd, style=wx.OPEN)
        if open_dlg.ShowModal() == wx.ID_OK:
            path = open_dlg.GetPath()
            
            result=self.VALID.validate_photo(path)
            if result[0]:
                
                self.bitmap_photo = wx.BitmapButton(self.panel_1, wx.ID_ANY,wx.Bitmap(path, wx.BITMAP_TYPE_ANY))
                self.__set_properties()
                self.__do_layout()
                self.button_save.Enable(True)
                self.prof_pic_path=path
                
                
                open_dlg.Destroy
                self.combo_box_adno.SetValue(str(self.current_admission_no))
                
                
            else:
                open_dlg.Destroy
                msg=result[1]
                icon=wx.ICON_ERROR
            
                dlg = wx.MessageDialog(self, msg, 'Size Error',wx.OK | wx.ICON_ERROR)                  
                dlg.ShowModal()
                dlg.Destroy()
        else:
            open_dlg.Destroy()
        
        event.Skip()

    
    def on_gender__change(self, event):  # wxGlade: student_profie.<event_handler>
        "Event handler 'on_gender__change' not implemented!"
        pass
        event.Skip()

        
    def on_add_new(self,event):  # wxGlade: student_profie.<event_handler>

        
        self.clear_student_details()
        self.button_delete.Disable()
        
        self.button_save.Label="Save"
        self.button_save.Enable(True)
        self.current_admission_no=0
        self.current_id=0
        self.add_flag=True
        self.set_editable(True)

    def on_close(self, event):  # wxGlade: student_profie.<event_handler>
        self.Close()
        event.Skip()

    def on_delete(self, event):  # wxGlade: student_profie.<event_handler>
        self.button_delete.Disable()
        self.button_save.Disable()
        self.db_delete()
        self.clear_student_details()
        self.bitmap_photo.Enable(False)
        cur_dir=os.path.dirname(os.path.abspath((sys.argv[0])))
        path=cur_dir+"/Resources/profile_pic/"+str(self.current_admission_no)+".jpg"
        if os.path.isfile(path):
            path=cur_dir+"/Resources/profile_pic/"+str(self.current_admission_no)+".jpg"
        
            os.remove(path)
            path=cur_dir+"/Resources/img/browse.jpg"
            self.bitmap_photo = wx.BitmapButton(self.panel_1, wx.ID_ANY,wx.Bitmap(path, wx.BITMAP_TYPE_ANY))
            self.__set_properties()
            self.__do_layout()


        
        event.Skip()

    def on_save(self, event):  # wxGlade: student_profie.<event_handler>
        
        
        if self.button_save.Label=="Edit":
            self.on_edit()
            self.button_delete.Disable()
        else:
        # if button save
            

            if self.text_ctrl_name.Value and self.combo_box_adno.GetValue():
                
                
                
                if not self.validate_all():
                    event.Skip()
                    return 0

                if self.add_flag:
                    result=self.db_insert()
                else:
                    result=self.db_update()
                if result:
                    if self.prof_pic_path!='':
                        from shutil import copyfile
                        cur_dir=os.path.dirname(os.path.abspath((sys.argv[0])))
                        
                        dest=cur_dir+"/Resources/profile_pic/"+str(self.current_admission_no)+".jpg"

                        copyfile(self.prof_pic_path,dest)
               
                    self.load_admission_no()
                    self.button_save.Disable()
            else:
                msg= "Admission number and name mandatory"
                
                dlg = wx.MessageDialog(self, msg, '',wx.OK | wx.ICON_ERROR)                  
                dlg.ShowModal()
                dlg.Destroy()
                
            self.button_save.Label="Edit"
            self.set_editable(False)
            self.bitmap_photo.Enable(False)
            
            cur_dir=os.path.dirname(os.path.abspath((sys.argv[0])))
            path=cur_dir+"/Resources/img/browse.jpg"
            self.bitmap_photo = wx.BitmapButton(self.panel_1, wx.ID_ANY,wx.Bitmap(path, wx.BITMAP_TYPE_ANY))
            self.__set_properties()
            self.__do_layout()

            


        event.Skip()
        
        
    def on_edit(self):
        
        
        self.set_editable()
        self.button_save.Label="Save"
    
        
    def load_year(self):
        self.combo_box_year.Clear()
        self.combo_box_div.Clear()
        years=self.DB.get_academic_year_list()
        years.insert(0,"Select Year")

        
        for item in years:
            self.combo_box_year.Append(str(item))
            
        self.combo_box_year.SetSelection(0) 
        self.combo_box_class.SetSelection(0) 
            
    def load_div(self,token='1'):
        # token 1 for one set of combos...token 2 for the other set
        
        if token!='1':
            divs=self.DB.Get_Div(self.YEAR2,self.CLASS2)
            
            divs=['Select Division']+divs
            divs=self.restrain_div(divs)
            for item in divs:
                self.combo_box_6.Append(str(item))   
        else:        
            divs=self.DB.Get_Div(self.YEAR,self.CLASS)
            divs=['Select Division']+divs
            
            for item in divs:
                self.combo_box_div.Append(str(item))   
    
    def load_admission_no(self):
        
        self.combo_box_adno.Clear()
        
        self.LIST=self.DB.Get_Student_List(self.YEAR,self.combo_box_class.Value,self.combo_box_div.Value)
        
        self.combo_box_adno.Append("Select Student")
        #self.combo_box_adno.SetSelection(0)
        
        for each in self.LIST:
            
            self.combo_box_adno.Append(each[1])
            
        print "setting selectio"
        self.combo_box_adno.SetSelection(0) 
        
    def clear_student_details(self):
        
        self.text_ctrl_roll.Value=''
        self.text_ctrl_name.Value=''

        self.text_ctrl_uid.Value=''
        self.combo_box_gender.Clear()
        self.combo_box_gender.Value=''
        self.text_ctrl_dob.Value=''
        self.text_ctrl_category.Value=''
        self.text_ctrl_religion.Value=''
        self.text_ctrl_caste.Value=''
        self.text_ctrl_language.Value=''
        self.text_ctrl_father.Value=''
        self.text_ctrl_mother.Value=''
        self.text_ctrl_mobile.Value=''
        self.text_ctrl_email.Value=''
        
        #self.combo_box_adno.Value=''
        self.combo_box_gender.Value=''
        
        
        
    def load_student_details(self):
        #NAME,UID, GENDER, DOB, CATEGORY, RELIGION, CASTE, FIRST_LANGUAGE,FATHER,MOTHER,PHONE,EMAIL
        if self.current_admission_no!="Select Student":
            self.STUDENT_DETAILS= self.DB.Get_Profile(self.current_admission_no)
            
            self.text_ctrl_name.Value=self.STUDENT_DETAILS[0]
            #print self.LIST
            self.text_ctrl_uid.Value=str(self.STUDENT_DETAILS[1])
            self.combo_box_gender.Clear()
            self.combo_box_gender.Append(self.STUDENT_DETAILS[2])
            self.combo_box_gender.SetSelection(0)
            self.text_ctrl_dob.Value=self.STUDENT_DETAILS[3]
            self.text_ctrl_category.Value=self.STUDENT_DETAILS[4]
            self.text_ctrl_religion.Value=self.STUDENT_DETAILS[5]
            self.text_ctrl_caste.Value=self.STUDENT_DETAILS[6]
            self.text_ctrl_language.Value=self.STUDENT_DETAILS[7]
            self.text_ctrl_father.Value=self.STUDENT_DETAILS[8]
            self.text_ctrl_mother.Value=self.STUDENT_DETAILS[9]
            self.text_ctrl_mobile.Value=self.STUDENT_DETAILS[10]
            self.text_ctrl_email.Value=self.STUDENT_DETAILS[11]
            self.text_ctrl_roll.Value=str(self.STUDENT_DETAILS[12])
            self.reset_photo()
                   
            
        if (self.text_ctrl_name) and (self.current_admission_no!="Select Student"):
            self.button_save.Enable()
            self.button_delete.Enable()
        else:
            self.button_save.Disable()
            self.button_delete.Disable()
            
        
    def set_editable(self,option=True):
        # Sets controls readonly or editable
        self.CONTROLS=[self.text_ctrl_roll,self.combo_box_adno,self.text_ctrl_name,self.text_ctrl_uid,self.text_ctrl_dob]

        self.CONTROLS+=[self.text_ctrl_category,self.text_ctrl_religion,self.text_ctrl_caste,self.text_ctrl_language]
        self.CONTROLS+=[self.text_ctrl_father,self.text_ctrl_mother,self.text_ctrl_mobile,self.text_ctrl_email]
        
        if option:
            
            self.combo_box_gender.Clear()
            self.combo_box_gender.Append("F")
            self.combo_box_gender.Append("M")
            self.combo_box_gender.Append("N")
            gender=self.combo_box_gender.Value
            self.bitmap_photo.Enable(True)
            
        else:
            
            gender=self.combo_box_gender.Value
            self.combo_box_gender.Clear()
            self.combo_box_gender.Append(gender)
            self.combo_box_gender.SetSelection(0)
            self.bitmap_photo.Enable(False)

            
        if option:
            self.combo_box_gender.SetForegroundColour(wx.Colour(165, 42, 42))
        else:
            self.combo_box_gender.SetForegroundColour(wx.Colour(76, 76, 76))
        
        for each in self.CONTROLS:
            each.SetEditable(option)
            if option:
                each.SetForegroundColour(wx.Colour(165, 42, 42))
                
            else:    
                
                each.SetForegroundColour(wx.Colour(76, 76, 76))
    def db_update(self):

        
        # The format of student list expected by the function follows
        #SL No. 	Class 	Division 	Admission_No 	Name 	UID 	Gender 	DOB 	Category 	Religion 	Caste 	First_Language 	Father 	Mother 	Phone
        
        
        
        mylist=['',self.CLASS,self.DIV,self.combo_box_adno.GetValue(),self.text_ctrl_name.Value]
        mylist+=[self.text_ctrl_uid.Value,self.combo_box_gender.GetStringSelection(),self.text_ctrl_dob.Value]
        mylist+=[self.text_ctrl_category.Value,self.text_ctrl_religion.Value,self.text_ctrl_caste.Value]
        mylist+=[self.text_ctrl_language.Value,self.text_ctrl_father.Value,self.text_ctrl_mother.Value]
        mylist+=[self.text_ctrl_mobile.Value,self.text_ctrl_email.Value,self.text_ctrl_roll.Value]
        
        flag=False
        previous_ad_no=0
        if self.current_admission_no!=mylist[3]: # checking if updating ad no
            
            result=self.DB.Admission_Exists(mylist[3])
            previous_ad_no=self.current_admission_no

            if result:
                msg= "Admission No: "+mylist[3]+" is already allotted to "+result[1]
                flag=True
                dlg = wx.MessageDialog(self, msg, '',wx.OK | wx.ICON_ERROR)                  
                dlg.ShowModal()
                dlg.Destroy()
            else:
                #previous_ad_no=mylist[3]
                pass

                
        if not flag:
            
            #try:
            
            self.DB.Update_Student_Full(self.YEAR,mylist,previous_ad_no,commit=True)
            msg="Successfully Saved"
            icon=wx.ICON_INFORMATION
            '''except:
                msg="Failed to Save Data"
                icon=wx.ICON_ERROR
            '''
            dlg = wx.MessageDialog(self, msg, '',wx.OK | icon)                  
            dlg.ShowModal()
            dlg.Destroy()
            
            
            self.clear_student_details()
            return True
        return False
    def db_delete(self):
        
        msg="The student "+self.text_ctrl_name.Value+", along with all data, will be deleted\nAre you sure you want to  continue?"
        dlg = wx.MessageDialog(self, msg,"Warning", wx.YES_NO | wx.ICON_QUESTION)
        result = dlg.ShowModal()# == wx.ID_YES
        if result==wx.ID_NO:
            return 0
        dlg.Destroy()
        
        try:
                self.DB.Remove_Student_Full(self.combo_box_adno.GetStringSelection())
                msg="Successfully Removed Student"
                icon=wx.ICON_INFORMATION
        except:
            msg="Failed to Remove the Student"
            icon=wx.ICON_ERROR
            
        dlg = wx.MessageDialog(self, msg, '',wx.OK | icon)                  
        dlg.ShowModal()
        dlg.Destroy()
            
        
            
        self.load_admission_no()
        self.clear_student_details()
        self.button_delete.Disable()

    def db_insert(self):
        mylist=['',self.CLASS,self.DIV,self.combo_box_adno.GetValue (),self.text_ctrl_name.Value]
        mylist+=[self.text_ctrl_uid.Value,self.combo_box_gender.GetStringSelection(),self.text_ctrl_dob.Value]
        mylist+=[self.text_ctrl_category.Value,self.text_ctrl_religion.Value,self.text_ctrl_caste.Value]
        mylist+=[self.text_ctrl_language.Value,self.text_ctrl_father.Value,self.text_ctrl_mother.Value]
        mylist+=[self.text_ctrl_mobile.Value,self.text_ctrl_email.Value,self.text_ctrl_roll.Value]
        
        result=self.DB.Admission_Exists(mylist[3])
        if result:
            msg="Admission No: "+mylist[3]+" is already allotted to "+result[1]
            dlg = wx.MessageDialog(self, msg, '',wx.OK | wx.ICON_ERROR)                  
            dlg.ShowModal()
            dlg.Destroy()


            self.combo_box_adno.SetValue("")
            
        else:
            try:
                self.DB.Add_Student_Full(self.YEAR,mylist)
                msg="Successfully Saved"
                icon=wx.ICON_INFORMATION
            except:
                msg="Failed to Save Data"
                icon=wx.ICON_ERROR
            dlg = wx.MessageDialog(self, msg, '',wx.OK | icon)                  
            dlg.ShowModal()
            dlg.Destroy()
            
            self.button_save.Disable()
            self.button_delete.Disable()
            self.add_flag=False        
            
            self.clear_student_details()
            return True
        
        return False
        
    def validate_all(self):
        result=self.VALID.validate_roll(self.text_ctrl_roll.Value)
        
        print "validating"
        msg=''
        if not result[0]:
            msg=result[1]
        elif not self.VALID.validate_uid(self.text_ctrl_uid.Value)[0]:
            msg=self.VALID.validate_uid(self.text_ctrl_uid.Value)[1]
        elif not self.VALID.validate_date(self.text_ctrl_dob.Value)[0]:
            msg=self.VALID.validate_date(self.text_ctrl_dob.Value)[1]
        elif not self.VALID.validate_mobile(self.text_ctrl_mobile.Value)[0]:
            msg=self.VALID.validate_mobile(self.text_ctrl_mobile.Value)[1]
        elif not self.VALID.validate_email(self.text_ctrl_email.Value)[0]:
            
            msg=self.VALID.validate_email(self.text_ctrl_email.Value)[1]
            
            
        if msg!='':
            
            
            dlg = wx.MessageDialog(self, msg, 'Input Error',wx.OK | wx.ICON_ERROR)                  
            dlg.ShowModal()
            dlg.Destroy()
            return 0
        
        return True
        # end of class student_profie
if __name__ == "__main__":
    gettext.install("app") # replace with the appropriate catalog name

    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame_1 = student_profile(None, wx.ID_ANY, "")
    app.SetTopWindow(frame_1)
    frame_1.ShowModal()
    frame_1.Destroy()
    app.MainLoop()