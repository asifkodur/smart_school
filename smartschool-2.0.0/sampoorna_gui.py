#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.6.8 on Sat Nov  5 23:33:12 2016
#


import wx
import time

# begin wxGlade: dependencies
import gettext
# end wxGlade
from parse_sampoona import html_parser 
# begin wxGlade: extracode
# end wxGlade
import threading
from threading import Thread
from wx.lib.pubsub import Publisher

from sampoorna import  sampoorna_reports,insert_to_db
import gettext
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class sampoorna_thread(Thread):
    
    
    def __init__(self,user,passw,classes):
        """Init Worker Thread Class."""
        Thread.__init__(self)
        self.user=user
        self.passw=passw
        self.classes=classes
        self.REPORT=[]
        self.current_class=''
        
        self.stopped=False
        self.start()    # start the thread
 
    
    def stop(self):
        self.stopped=True

    def stopped(self):
        return self.stopped
    def run(self):
        """Run Worker Thread."""
        
        # This is the code executing in the new thread.
        SM=sampoorna_reports()
        wx.CallAfter(Publisher().sendMessage, "update","Trying to Login onto Sampoorna")
        if self.stopped:
            wx.CallAfter(Publisher().sendMessage, "update","Aborted")
            return 0
        login=SM.login(self.user,self.passw)
        if login[0]:
            wx.CallAfter(Publisher().sendMessage, "update","Successfully Logged in")
            time.sleep(1)
            progress_value=10
            wx.CallAfter(Publisher().sendMessage, "progress_bar",progress_value)
            
            #wx.CallAfter(Publisher().sendMessage, "update","Preparing for dowloading data")
            
            for each_class in self.classes:
                wx.CallAfter(Publisher().sendMessage, "change_class",each_class)
                if self.stopped:
                    wx.CallAfter(Publisher().sendMessage, "update","Aborted")
                    return 0
            
                wx.CallAfter(Publisher().sendMessage, "update","Preparing for dowloading data for Standard "+str(each_class))
                SM.make_report_name(each_class)
                SM.delete_report()
                SM.create_report()
                
                first_page_link= SM.get_show_report_link()
                progress_value+=(10/len(self.classes))
                
                wx.CallAfter(Publisher().sendMessage, "progress_bar",progress_value)
                
                wx.CallAfter(Publisher().sendMessage, "update","Standard "+str(each_class)+":- Fetching Data from remote server .......")
                first_page_data=SM.get_page_wise_data(first_page_link)
                
                parser = html_parser()
                parser.feed_html(first_page_data,first_page=True)
                
                total_pages= parser.get_no_page() # returns the number of pages that report contains
                
                FULL_TABLE=[]

                parser.TABLE.remove([])
                FULL_TABLE=parser.TABLE
                progress_incr=60/(total_pages*len(self.classes))
                progress_value+=progress_incr
                
                wx.CallAfter(Publisher().sendMessage, "progress_bar",progress_value)
                
                
                # Downloading in Loop
                for i in range(1,total_pages+1,1): # This loops passes the other pages link to be processed and they will be appended to the table
                    if self.stopped:
                        wx.CallAfter(Publisher().sendMessage, "update","Aborted")
                        return 0
            
                    
                    link=first_page_link+"?page="+str(i)
                    
                    parser.TABLE=[]
                    data=SM.get_page_wise_data(link)
                    
                    parser.feed_html(data)
                    
                    table=parser.TABLE
                    
                    if table!=[]:
                    
                        for item in table:
                            if item!=[]:
                                
                                FULL_TABLE.append(item)
                    progress_value+=progress_incr
                    
                    wx.CallAfter(Publisher().sendMessage, "progress_bar",progress_value)
                count=0

                wx.CallAfter(Publisher().sendMessage, "update","Standard "+str(each_class)+":-Processeing Data")
                time.sleep(1)
                progress_value+=(10/len(self.classes))
                
                wx.CallAfter(Publisher().sendMessage, "progress_bar",progress_value)
                wx.CallAfter(Publisher().sendMessage, "update","Standard "+str(each_class)+":-Almost Finishes")
                
                if self.stopped:
                    wx.CallAfter(Publisher().sendMessage, "update","Aborted")
                    return 0
            
                wx.CallAfter(Publisher().sendMessage, "update","Standard "+str(each_class)+":-Writing to Local Database")
                sorted_list=SM.sort_by_div(FULL_TABLE)
                
                insert=insert_to_db()
                time.sleep(1)
                progress_value+=(10/len(self.classes))
                
                wx.CallAfter(Publisher().sendMessage, "progress_bar",progress_value)
                wx.CallAfter(Publisher().sendMessage, "update","Standard "+str(each_class)+":-Updation Completed Successfully")
                
                
                insert.insert_student(SM.year,sorted_list)
                
                self.REPORT.append([each_class,insert.insert_count,insert.update_count])
                insert.DB.Commit()
                SM.delete_report()
                            
            wx.CallAfter(Publisher().sendMessage, "progress_bar",100)                        
                                
                            
        else:
            #Error
             
            
            wx.CallAfter(Publisher().sendMessage, "update", login[1])
     
        wx.CallAfter(Publisher().sendMessage, "report", self.REPORT)
                
    
 
class sampoorna_win(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: sampoorna_win.__init__
        kwds["style"] = wx.CAPTION | wx.CLOSE_BOX |  wx.MAXIMIZE | wx.MAXIMIZE_BOX | wx.SYSTEM_MENU | wx.RESIZE_BORDER | wx.CLIP_CHILDREN
        wx.Dialog.__init__(self, *args, **kwds)
        self.notebook_1 = wx.Notebook(self, wx.ID_ANY, style=0)
        self.login_pane = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.panel_login = wx.Panel(self.login_pane, wx.ID_ANY)
        self.label_1 = wx.StaticText(self.panel_login, wx.ID_ANY, _("Warning: Always backup your database before you proceed to avoid potential data loss !!!"))
        self.label_2 = wx.StaticText(self.panel_login, wx.ID_ANY, _("This software does not save Sampoorna username or password. It is used for one time login"))
        self.panel_1 = wx.Panel(self.panel_login, wx.ID_ANY, style=wx.SUNKEN_BORDER | wx.RAISED_BORDER | wx.TAB_TRAVERSAL)
        self.label_3 = wx.StaticText(self.panel_1, wx.ID_ANY, _("Sampoorna Username"))
        self.text_ctrl_user = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER | wx.NO_BORDER)
        self.label_4 = wx.StaticText(self.panel_1, wx.ID_ANY, _("Sampoorna Password"))
        self.text_ctrl_passw = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER | wx.TE_PASSWORD | wx.NO_BORDER)
        self.button_next = wx.Button(self.panel_login, wx.ID_ANY, _("Next >>"))
        self.standard_pane = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.panel_3 = wx.Panel(self.standard_pane, wx.ID_ANY, style=wx.SUNKEN_BORDER | wx.RAISED_BORDER | wx.STATIC_BORDER | wx.TAB_TRAVERSAL)
        self.checkbox_8 = wx.CheckBox(self.panel_3, wx.ID_ANY, _("8 Standard"))
        self.checkbox_9 = wx.CheckBox(self.panel_3, wx.ID_ANY, _("9 Standard"))
        self.checkbox_10 = wx.CheckBox(self.panel_3, wx.ID_ANY, _("10 Standard"))
        self.button_previous = wx.Button(self.standard_pane, wx.ID_ANY, _("<<Previous"))
        self.button_proceed = wx.Button(self.standard_pane, wx.ID_ANY, _("Proceed >>"))
        self.report_pane = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.panel_2 = wx.Panel(self.report_pane, wx.ID_ANY)
        self.label_7 = wx.StaticText(self.panel_2, wx.ID_ANY, _("Progress"))
        self.progresss_total = wx.TextCtrl(self.panel_2, wx.ID_ANY, "")
        self.progress_each = wx.TextCtrl(self.panel_2, wx.ID_ANY, "")
        self.label_satus = wx.StaticText(self.panel_2, wx.ID_ANY, _("Status"))
        self.text_ctrl_report = wx.TextCtrl(self.panel_2, wx.ID_ANY, "", style=wx.TE_MULTILINE | wx.TE_READONLY | wx.HSCROLL | wx.NO_BORDER)
        self.button_finished = wx.Button(self.panel_2, wx.ID_ANY, _("Finished"))

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_TEXT, self.on_user_pass_text, self.text_ctrl_passw)
        self.Bind(wx.EVT_TEXT, self.on_user_pass_text, self.text_ctrl_user)
        self.Bind(wx.EVT_BUTTON, self.on_next, self.button_next)
        self.Bind(wx.EVT_CHECKBOX, self.on_check, self.checkbox_8)
        self.Bind(wx.EVT_CHECKBOX, self.on_check, self.checkbox_9)
        self.Bind(wx.EVT_CHECKBOX, self.on_check, self.checkbox_10)
        self.Bind(wx.EVT_BUTTON, self.on_previous, self.button_previous)
        self.Bind(wx.EVT_BUTTON, self.on_proceed, self.button_proceed)
        self.Bind(wx.EVT_BUTTON, self.on_finished, self.button_finished)
        # end wxGlade
        
        
        # create a pubsub receiver
        Publisher().subscribe(self.update_display, "update")
        Publisher().subscribe(self.final_report, "report")
        Publisher().subscribe(self.update_progress_bar, "progress_bar")
        Publisher().subscribe(self.update_current_class, "change_class")

    def __set_properties(self):
        # begin wxGlade: sampoorna_win.__set_properties
        self.SetTitle(_("Import from Sampoorna"))
        self.SetSize((894, 640))
        self.SetBackgroundColour(wx.Colour(47, 47, 47))
        self.label_1.SetBackgroundColour(wx.Colour(47, 47, 47))
        self.label_1.SetForegroundColour(wx.Colour(142, 35, 35))
        self.label_1.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.label_2.SetBackgroundColour(wx.Colour(47, 47, 47))
        self.label_2.SetForegroundColour(wx.Colour(192, 192, 0))
        self.label_2.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.label_3.SetForegroundColour(wx.Colour(255, 255, 255))
        self.label_3.SetFont(wx.Font(11, wx.DEFAULT, wx.ITALIC, wx.BOLD, 0, ""))
        self.text_ctrl_user.SetMinSize((250, 35))
        self.label_4.SetForegroundColour(wx.Colour(255, 255, 255))
        self.label_4.SetFont(wx.Font(11, wx.DEFAULT, wx.ITALIC, wx.BOLD, 0, ""))
        self.text_ctrl_passw.SetMinSize((250,35))
        self.panel_1.SetBackgroundColour(wx.Colour(47, 47, 47))
        self.button_next.SetMinSize((100, 35))
        self.button_next.SetBackgroundColour(wx.Colour(33, 137, 33))
        self.button_next.SetForegroundColour(wx.Colour(255, 255, 255))
        self.panel_login.SetBackgroundColour(wx.Colour(47, 47, 47))
        self.login_pane.SetBackgroundColour(wx.Colour(47, 47, 47))
        self.report_pane.SetBackgroundColour(wx.Colour(47, 47, 47))
        
        self.login_pane.SetFocus()
        self.checkbox_8.SetMinSize((100, 30))
        self.checkbox_8.SetForegroundColour(wx.Colour(255, 255, 255))
        self.checkbox_9.SetMinSize((100, 30))
        self.checkbox_9.SetForegroundColour(wx.Colour(255, 255, 255))
        self.checkbox_10.SetMinSize((120, 30))
        self.checkbox_10.SetForegroundColour(wx.Colour(255, 255, 255))
        self.panel_3.SetBackgroundColour(wx.Colour(47, 47, 47))
        self.button_previous.SetMinSize((100, 35))
        self.button_previous.SetBackgroundColour(wx.Colour(33, 137, 33))
        self.button_previous.SetForegroundColour(wx.Colour(255, 255, 255))
        self.button_proceed.SetMinSize((100, 35))
        self.button_proceed.SetBackgroundColour(wx.Colour(33, 137, 33))
        self.button_proceed.SetForegroundColour(wx.Colour(255, 255, 255))
        self.standard_pane.SetBackgroundColour(wx.Colour(47, 47, 47))
        self.standard_pane.Hide()
        self.label_7.SetForegroundColour(wx.Colour(255, 255, 255))
        self.progresss_total.SetMinSize((400, 30))
        self.progress_each.SetMinSize((400, 30))
        self.label_satus.SetForegroundColour(wx.Colour(255, 255, 255))
        self.text_ctrl_report.SetMinSize((450, 400))
        self.text_ctrl_report.SetBackgroundColour(wx.Colour(47, 47, 47))
        self.text_ctrl_report.SetForegroundColour(wx.Colour(255, 255, 255))
        self.text_ctrl_report.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.button_finished.SetMinSize((100, 35))
        self.button_finished.SetBackgroundColour(wx.Colour(33, 137, 33))
        self.button_finished.SetForegroundColour(wx.Colour(255, 255, 255))
        self.panel_2.SetBackgroundColour(wx.Colour(47, 47, 47))
        self.report_pane.SetBackgroundColour(wx.Colour(249, 249, 248))
        self.notebook_1.SetBackgroundColour(wx.Colour(33, 137, 33))
        self.notebook_1.SetForegroundColour(wx.Colour(255, 255, 255))
        
        self.report_pane.Hide()
        self.button_next.Disable()
        self.button_proceed.Disable()
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: sampoorna_win.__do_layout
        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_13 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_10 = wx.BoxSizer(wx.VERTICAL)
        sizer_12 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_13_copy = wx.BoxSizer(wx.VERTICAL)
        sizer_11 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_7 = wx.BoxSizer(wx.VERTICAL)
        sizer_5 = wx.BoxSizer(wx.VERTICAL)
        sizer_8 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_9 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_2 = wx.GridSizer(1, 3, 0, 0)
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4_copy = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_1 = wx.GridSizer(2, 2, 0, 0)
        sizer_2.Add(self.label_1, 1, wx.ALIGN_BOTTOM, 0)
        sizer_2.Add(self.label_2, 1, wx.ALIGN_BOTTOM, 1)
        grid_sizer_1.Add(self.label_3, 0, wx.ALIGN_RIGHT | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.text_ctrl_user, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.label_4, 0, wx.ALIGN_RIGHT | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.text_ctrl_passw, 1, wx.ALIGN_CENTER_VERTICAL, 0)
        self.panel_1.SetSizer(grid_sizer_1)
        sizer_4_copy.Add(self.panel_1, 2, wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_2.Add(sizer_4_copy, 3, wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_3.Add(self.button_next, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_2.Add(sizer_3, 1, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        self.panel_login.SetSizer(sizer_2)
        sizer_1.Add(self.panel_login, 1, wx.ALL | wx.EXPAND, 20)
        self.login_pane.SetSizer(sizer_1)
        grid_sizer_2.Add(self.checkbox_8, 0, 0, 0)
        grid_sizer_2.Add(self.checkbox_9, 0, 0, 0)
        grid_sizer_2.Add(self.checkbox_10, 0, 0, 0)
        self.panel_3.SetSizer(grid_sizer_2)
        sizer_5.Add(self.panel_3, 1, wx.ALL | wx.ALIGN_BOTTOM | wx.ALIGN_CENTER_HORIZONTAL, 20)
        sizer_9.Add(self.button_previous, 0, wx.RIGHT | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 40)
        sizer_9.Add(self.button_proceed, 0, wx.LEFT | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 40)
        sizer_8.Add(sizer_9, 1, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_5.Add(sizer_8, 1, wx.ALIGN_CENTER_HORIZONTAL, 0)
        self.standard_pane.SetSizer(sizer_5)
        sizer_11.Add(self.label_7, 0, 0, 0)
        sizer_7.Add(self.progresss_total, 0, wx.LEFT | wx.BOTTOM, 20)
        sizer_7.Add(self.progress_each, 0, wx.LEFT, 20)
        sizer_6.Add(sizer_7, 1, wx.EXPAND, 0)
        sizer_11.Add(sizer_6, 1, wx.EXPAND, 0)
        sizer_10.Add(sizer_11, 1, wx.EXPAND, 2)
        sizer_10.Add(self.label_satus, 0, wx.BOTTOM | wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL, 10)
        sizer_10.Add(self.text_ctrl_report, 0, wx.EXPAND, 0)
        sizer_13_copy.Add(self.button_finished, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_12.Add(sizer_13_copy, 1, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_10.Add(sizer_12, 1, wx.EXPAND, 0)
        self.panel_2.SetSizer(sizer_10)
        sizer_13.Add(self.panel_2, 1, wx.ALL | wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 20)
        self.report_pane.SetSizer(sizer_13)
        self.notebook_1.AddPage(self.login_pane, _("Login"))
        self.notebook_1.AddPage(self.standard_pane, _("Select Standards"))
        self.notebook_1.AddPage(self.report_pane, _("Reports"))
        sizer_4.Add(self.notebook_1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_4)
        self.Layout()
    

    
    def on_next(self, event):  # wxGlade: sampoorna_win.<event_handler>
        self.report_pane.Hide()
        self.login_pane.Hide()
        self.standard_pane.Show()
        event.Skip()

    def on_check(self, event):  # wxGlade: sampoorna_win.<event_handler>
        
        if self.checkbox_8.IsChecked() or self.checkbox_9.IsChecked() or self.checkbox_10.IsChecked():
            self.button_proceed.Enable()
        else:
            self.button_proceed.Disable()
        event.Skip()

    def on_previous(self, event):  # wxGlade: sampoorna_win.<event_handler>
        self.report_pane.Hide()
        self.login_pane.Show()
        self.standard_pane.Hide()
        event.Skip()

    def on_proceed(self, event):  # wxGlade: sampoorna_win.<event_handler>
        self.report_pane.Show()
        self.login_pane.Hide()
        self.standard_pane.Hide()    
        self.user=self.text_ctrl_user.Value
        self.passw=self.text_ctrl_passw.Value
        self.classes=[]
        if self.checkbox_8.IsChecked():
            self.classes.append('8')
        if self.checkbox_9.IsChecked():
            self.classes.append('9')

        if self.checkbox_10.IsChecked():
            self.classes.append('10')

        
        self.thread=sampoorna_thread(self.user,self.passw,self.classes)
          
        event.Skip()

    def on_finished(self, event):  # wxGlade: sampoorna_win.<event_handler>
        if self.button_finished.Label=="Abort":
            msg="Do you want to abort this operation?"
            dlg = wx.MessageDialog(self, msg,"Warning", wx.YES_NO | wx.ICON_QUESTION)
            result = dlg.ShowModal()# == wx.ID_YES
            if result==wx.ID_YES:
                
                
                self.thread.stop()
                self.Close()
                
            dlg.Destroy()
        else:
            self.Close()
        event.Skip()# end of class sampoorna_win
        
    def on_user_pass_text(self,event):
        
        if self.text_ctrl_passw.Value and self.text_ctrl_user.Value:
            
            self.button_next.Enable()
        else:
            
            self.button_next.Disable()
    def update_display(self, msg):
        """
        Receives data from thread and updates the display
        """
        data = msg.data
        
        self.label_satus.SetLabel("Status: "+str(data))
        if data=="Successfully Logged in" or data=="Aborted" :
            self.text_ctrl_report.Value="\n"+data+self.text_ctrl_report.Value
        
        if data.find("Fetching Data from remote server")!=-1:
            self.text_ctrl_report.Value="\n        Preparations made for download"+self.text_ctrl_report.Value
        if data.find("Processeing Data")!=-1:
            self.text_ctrl_report.Value="\n        Downloaded data for the class"+self.text_ctrl_report.Value
        
        if data.find("Writing to Local Database")!=-1:
            self.text_ctrl_report.Value="\n        Data Processing Completed for the class"+self.text_ctrl_report.Value
            
        if data.find("Updation Completed ")!=-1:
            self.text_ctrl_report.Value="\n        Database Updated for the class"  +self.text_ctrl_report.Value  
        #self.list_ctrl_1.Append(str(data))
        if msg.data=="Invalid Username Password combination":
            self.button_finished.SetLabel("Close")
            self.label_1.SetForegroundColour(wx.Colour(204, 50, 50))
            self.text_ctrl_report.Value=msg.data

    def final_report(self,msg):
        # rceives from thread
        #self.list_ctrl_1.Append(str(msg.data))
        self.text_ctrl_report.Value="\n\n###############################\n"+self.text_ctrl_report.Value
        self.text_ctrl_report.Value="The Final Report\n"+self.text_ctrl_report.Value
        
        for each_report in msg.data:
            self.text_ctrl_report.Value= "In class "+str(each_report[0])+': '+str(each_report[1 ])+" studnets newly added\n"+self.text_ctrl_report.Value
            self.text_ctrl_report.Value= "In class "+str(each_report[0])+': '+str(each_report[2 ])+" student records updated"+self.text_ctrl_report.Value
        
        self.text_ctrl_report.Value="###############################\n"+self.text_ctrl_report.Value

        self.button_finished.SetLabel("Finished")
        self.button_finished.Show()
        
    def update_progress_bar(self,msg):
        self.progresss_total.SetValue(msg.data)
        self.label_progress_perc.SetLabel(str(msg.data)+'%')
        if msg.data=="Invalid Username Password combination":
            self.button_finished.SetLabel("Close")
    def update_current_class(self,msg):
        
        self.text_ctrl_report.Value="\n**********\nCurrently Processing\n Standard "+msg.data+"\n**********"+self.text_ctrl_report.Value
    
# end of class sampoorna_win
if __name__ == "__main__":
    gettext.install("app") # replace with the appropriate catalog name

    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    main_frame = sampoorna_win(None, wx.ID_ANY, "")
    app.SetTopWindow(main_frame)
    main_frame.Show()
    app.MainLoop()