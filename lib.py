#!/usr/bin/env python
# -*- coding: utf-8 -*-
# partially generated by wxGlade 0.6.3 on Wed Aug 28 14:02:23 2013


import wx
import wx.grid as gridlib
import THEME

import os,sys

import sqlite3 as mysql

from report import Report,Report_8,Partial_Report,Partial_Report_8

from promotion_list import Promotion_List

from dboperations import db_operations


from custom_report import custom_report

#Global Veriables
MAX_CE=20
MAX_TE=80
YEAR=""
STD=""
DIV=""
TERM="Term 1"
SUBJ=""
STUDENTS=1
SUBJECT=""
SUBJECT_INDEX=-1
ATTENDANCE_INDEX=-1
TERM_INDEX=0
CHANGES_TO_SAVE=False

#end of Globals
dir = os.path.split(sys.argv[0])[0]
mydb=dir+"/Resources/mydb.db"
RESOURCES=dir+"/Resources/"

ALL_CLASS=["8A","8B","8C","8D","8E","8F","9A"]





class Add_Student(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: Add_Student.__init__
        kwds["style"] = wx.CAPTION | wx.CLOSE_BOX | wx.MINIMIZE_BOX | wx.STAY_ON_TOP
        wx.Dialog.__init__(self, *args, **kwds)
        self.text_ctrl_1 = wx.TextCtrl(self, -1, "")
        self.text_ctrl_2 = wx.TextCtrl(self, -1, "")
        self.text_ctrl_3 = wx.TextCtrl(self, -1, "")
        self.button_1 = wx.Button(self, -1, "Add")
        
        self.Bind(wx.EVT_CLOSE,self.OnClose,self)

        self.__set_properties()
        self.__do_layout()
        
        self.DB=db_operations()
        self.success=False
        self.STUDENT_INFO=[]
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: Add_Student.__set_properties
        self.SetTitle("Add Student")
        self.SetSize((485, 100))
        self.SetFocus()
        
        self.text_ctrl_1.SetMinSize((50, 32))
        self.text_ctrl_1.Value="Roll"
        self.text_ctrl_1.SetForegroundColour('#9CA998')
        
        
        self.text_ctrl_2.SetMinSize((80, 32))
        self.text_ctrl_2.Value="Admsn No"
        self.text_ctrl_2.SetForegroundColour('#9CA998')
        
        
        self.text_ctrl_3.SetMinSize((220, 32))
        self.text_ctrl_3.Value="Name"
        self.text_ctrl_3.SetForegroundColour('#9CA998')
        
        
        self.button_1.SetMinSize((85, 32))
        
        self.text_ctrl_1.SetName("roll")
        self.text_ctrl_2.SetName("ad_no")
        self.text_ctrl_3.SetName("name")
        
        self.Bind(wx.EVT_BUTTON, self.Add_Clicked, self.button_1)
        self.text_ctrl_1.Bind(wx.EVT_SET_FOCUS,self.OnFocus)
        self.text_ctrl_1.Bind(wx.EVT_KILL_FOCUS,self.OffFocus)
        self.text_ctrl_2.Bind(wx.EVT_SET_FOCUS,self.OnFocus)
        self.text_ctrl_2.Bind(wx.EVT_KILL_FOCUS,self.OffFocus)
        self.text_ctrl_3.Bind(wx.EVT_SET_FOCUS,self.OnFocus)
        self.text_ctrl_3.Bind(wx.EVT_KILL_FOCUS,self.OffFocus)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: Add_Student.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add(self.text_ctrl_1, 0, wx.LEFT | wx.RIGHT, 10)
        sizer_2.Add(self.text_ctrl_2, 0, 0, 0)
        sizer_2.Add(self.text_ctrl_3, 0, wx.LEFT, 10)
        sizer_2.Add(self.button_1, 0, wx.LEFT | wx.RIGHT | wx.ALIGN_RIGHT, 10)
        sizer_1.Add(sizer_2, 1, wx.TOP | wx.EXPAND, 30)
        self.SetSizer(sizer_1)
        self.Layout()
        self.Centre()
        # end wxGlade
        
      
    def OnFocus(self,event):
        
        obj=event.GetEventObject()
        obj_name=obj.GetName()
        obj_value=obj.Value
        
        
        
        if (obj_name=="roll"  and obj_value=="Roll") or (obj_name=="ad_no" and obj_value=="Admsn No") or (obj_name=="name" and obj_value=="Name"):
            
            obj.Value=""
            obj.SetForegroundColour('#0A0A0A')
        

    def OffFocus(self,event):

        obj=event.GetEventObject()
        obj_name=obj.GetName()
        
        value=""
        if obj_name=="roll":
            value="Roll"
        elif obj_name=="ad_no":
            value="Admsn No"
        elif obj_name=="name":
            value="Name"

        if obj.Value=="":

            obj.Value=value
            obj.SetForegroundColour('#9CA998')
            
    def Add_Clicked(self,event):
        if (self.Validate_Roll_No(self.text_ctrl_1.Value)) and (self.Validate_Adm_No(self.text_ctrl_2.Value)) and (self.Validate_Name(self.text_ctrl_3.Value)):
            
            try:
                student_id,t1_id,t2_id,t3_id=self.DB.Add_Student(self.text_ctrl_1.Value,self.text_ctrl_2.Value,self.text_ctrl_3.Value,self.Parent.YEAR,self.Parent.CLASS,self.Parent.DIV)
                #term,div_id,subject_index,student_id="All"
                
                student_id="All"
                if self.Parent.TERM_INDEX==0:
                    term="1"
                    t_id=t1_id
                elif self.Parent.TERM_INDEX==1:
                    term="2"
                    t_id=t2_id
                elif self.Parent.TERM_INDEX==2:
                    term="3"
                    t_id=t3_id
                    
                if self.Parent.SUBJECT=="Select":
                    ROW=[False,student_id,self.text_ctrl_2.Value,self.text_ctrl_3.Value,t_id,self.text_ctrl_1.Value,0,0,0,0]
                div_id=self.DB.Get_Div_Id(self.Parent.YEAR,self.Parent.CLASS,self.Parent.DIV)    
                
                self.DB.Score_and_Roll(term,div_id,self.Parent.SUBJECT_INDEX,student_id)
                dlg = wx.MessageDialog(self, 'Added Successfully', '',wx.OK | wx.ICON_INFORMATION)
                self.success=True
                self.STUDENT_INFO=[self.text_ctrl_1.Value,self.text_ctrl_2.Value,self.text_ctrl_3.Value]
                dlg.ShowModal()
                dlg.Destroy()
            except:
                dlg = wx.MessageDialog(self, 'Sorry, Could not Add', '',wx.OK | wx.ICON_ERROR)
                self.STUDENT_INFO=[]
                dlg.ShowModal()
                dlg.Destroy()
            
            
            self.Close()
            
    def Validate_Roll_No(self,value):
        
        if not value.isdigit() and value !="":
            dlg = wx.MessageDialog(self, 'Roll No should be integer', '',wx.OK | wx.ICON_ERROR)
            dlg.ShowModal()
            dlg.Destroy()
            return 0
        
        else:
            return 1
        
    def Validate_Adm_No(self,value):
        
        
        if not value.isdigit() and value!="":
            dlg = wx.MessageDialog(self, 'Admission No should be integer', '',wx.OK | wx.ICON_ERROR)
            dlg.ShowModal()
            dlg.Destroy()
            return 0
        
        else: # if admission no already exists
            
            
           
            
           
            
            query='SELECT ID,NAME FROM STUDENT WHERE ADMISSION_NO='+str(value)
            result=self.DB.Execute(query)
            
            row=result.fetchone()
            if result!=None and row!=None:
                
                dlg = wx.MessageDialog(self, 'Admission No Already Alloted to '+row[1], '',wx.OK | wx.ICON_ERROR)
                dlg.ShowModal()
                dlg.Destroy()
                return 0
        return 1
    
    
    def Validate_Name(self,value):
        if value=="" or value=="Name":
            dlg = wx.MessageDialog(self, 'Name should not be empty', '',wx.OK | wx.ICON_ERROR)
            dlg.ShowModal()
            dlg.Destroy()
            return 0
        return 1
    def OnClose(self,event):
        self.Parent.Enabled=True
        #print "closin"
        
        event.Skip()
        
    def run(self):
        self.Show()
        
        #print "run"



class MyGridForm(wx.Frame):
    def __init__(self, *args, **kwds):
        
        #global STD,DIV,TERM,RESOURCES
        kwds["style"] = wx.DEFAULT_FRAME_STYLE|wx.CAPTION|wx.CLOSE_BOX|wx.MINIMIZE_BOX|wx.MAXIMIZE_BOX|wx.MAXIMIZE#|wx.STAY_ON_TOP
        wx.Frame.__init__(self, *args, **kwds)        
        if STD=="8":
            choice=["Select Subject","First Language", "Malayalam II", "English", "Hindi", "Social Science", "Basic Science", "Mathematics", "I.T","Work Experience","Art Education","Physcal & Health Edu","Attendance"]
        else:
            choice=["Select Subject","First Language", "Malayalam II", "English", "Hindi", "Social Science", "Physics", "Chemistry", "Biology", "Mathematics", "I.T","Work Experience","Art Education","Physcal & Health Edu","Attendance"]
        self.combo_box_1 = wx.ComboBox(self, -1, choices=choice, style=wx.CB_DROPDOWN|wx.CB_DROPDOWN|wx.CB_READONLY)
        
        self.label_6 = wx.StaticText(self, -1, "Sorted By", style=wx.ALIGN_CENTRE)
        self.combo_box_2 = wx.ComboBox(self, -1, choices=["Roll No","Admission No", "Name","CE","TE","Total","Grade"], style=wx.CB_DROPDOWN|wx.CB_DROPDOWN|wx.CB_READONLY)
        self.combo_box_2.Enabled=False
        self.grid_1 = wx.grid.Grid(self, -1, size=(1, 1))        
        self.button_1=wx.Button(self, -1, "Save")
        self.button_2=wx.Button(self, -1, "Close")
        self.label_1 = wx.StaticText(self, -1, "Class: ")
        self.label_2 = wx.StaticText(self, -1, "Div: ")
        self.label_3 = wx.StaticText(self, -1, "Term: ")        
        self.label_4 = wx.StaticText(self, -1, "MAX_CE: ")
        self.label_5 = wx.StaticText(self, -1, "MAX_TE: ")     
           
        self.current_cell_value=""     
        self.IsRangeSelected=False
        self.Selected_TopLeft=(-1,-1)
        self.Selected_BottomRight=(-1,-1)
        
        #self.bitmap_button_1.Enabled=False
        #self.bitmap_button_2.Enabled=False
        
        
        #self.SetMenuBar(MainWindowMenuBar()) 
               

        self.Bind(wx.EVT_TEXT, self.OnText, self.combo_box_1)
        self.Bind(wx.EVT_TEXT_ENTER, self.OnEnter, self.combo_box_1)
        self.Bind(wx.EVT_COMBOBOX, self.OnCombo, self.combo_box_1)        
        self.Bind(wx.EVT_CLOSE,self.OnClose,self)
        self.Bind(wx.EVT_BUTTON, self.Save_Clicked, self.button_1)
        self.Bind(wx.EVT_BUTTON, self.Cancel_Clicked, self.button_2)
        #self.Bind(wx.EVT_BUTTON, self.OnAddClick, self.bitmap_button_1)
        #self.Bind(wx.EVT_BUTTON, self.OnRemoveClick, self.bitmap_button_2)
        self.Bind(gridlib.EVT_GRID_CELL_CHANGE, self.OnCellChange,self.grid_1)
        self.Bind(wx.grid.EVT_GRID_CMD_RANGE_SELECT, self.OnRangeSelected, self.grid_1)
        self.Bind(wx.grid.EVT_GRID_CMD_EDITOR_CREATED, self.OnEditorCreated, self.grid_1)
        self.Bind(wx.grid.EVT_GRID_CMD_EDITOR_HIDDEN, self.OnEditorHidden, self.grid_1)
        self.Bind(wx.grid.EVT_GRID_CMD_SELECT_CELL, self.OnSelectCell, self.grid_1)
        self.Bind(wx.grid.EVT_GRID_CMD_CELL_RIGHT_CLICK, self.OnCellRightClick, self.grid_1)
        self.Bind(wx.grid.EVT_GRID_CMD_EDITOR_SHOWN, self.OnEditorShown, self.grid_1)
        self.Bind(wx.grid.EVT_GRID_CMD_LABEL_RIGHT_CLICK, self.On_label_right_click, self.grid_1)
        #self.Bind(wx.EVT_SIZING,self.OnSizing)
        #self.Bind(wx.EVT_HOTKEY,self.OnHotKey)
        
        self.Bind(wx.EVT_KEY_DOWN, self.onKeyPress)
        
        self.Bind(wx.EVT_RIGHT_DOWN, self.OnRightDown)

        #EVT_KEY_DOWN
        
        #wx.EVT_KEY_DOWN(self, self.OnKey)
        self.SetMenu()
        
        self.Set_Context_Menu()
        
        
        
        
        # DB Class object        
        
        self.DB=db_operations()
        
        self.UNDO_LIST=[]
        self.UNDO_INDEX=0
        self.paste_lock=False
        self.delete_lock=False
        self.cut_lock=False
        self.MAX_CE=0
        self.MAX_TE=0
        
        self.SILENT_SAVE=False
        
        
        
        #DB connection
        
        #self.con=mysql.connect(Mydb)
        #self.cur = self.con.cursor()
        
        #self.Maximize(True)
    def OnKey(self,event):
        if event.ControlDown() and event.GetKeyCode() == 67:
            print ("Ctrl+C")
            
        
    def SetMenu(self):
        
        menu1 = wx.Menu()
        menu2=wx.Menu()
        menu3=wx.Menu()
        menu5=wx.Menu()
        menu4=wx.Menu()
        menu6=wx.Menu()
        menu7=wx.Menu()
        
        
        menu1.Append(110, "&Exit")
        
        
        menu2.Append(115, "&Complete Report")#sub
        menu2.Append(116, "&Second Term Only") #sub 
        menu3.AppendMenu(180, "&Progress Report",menu2)
        
       
        menu3.Append(118, "P&romotion List")
    
        menu3.Append(117, "C&ustom Reports")
        
        
        
        #menu6.Append(116, "&Statistics")
        
        


        menuBar = wx.MenuBar()
        menuBar.Append(menu1, "&File");
        
          
             
        menuBar.Append(menu3, "&Reports");
        
        
        self.SetMenuBar(menuBar)



        wx.EVT_MENU(self, 110, self.OnMenu_Exit)
       
        
        
        wx.EVT_MENU(self, 115,  self.OnMenu_PerformanceReport)
        wx.EVT_MENU(self, 116,  self.OnMenu_Performance_T2_Only)
        wx.EVT_MENU(self, 117,  self.OnMenu_Custom)
        
        wx.EVT_MENU(self, 118,  self.OnPromotion_List)
    def OnMenu_Custom(self,event):
        C=custom_report(self)
        try:
            C.ShowModal()
            C.Destroy()
        
        except:
            
            dlg = wx.MessageDialog(self, 'Some error occured', 'Error',wx.OK | wx.ICON_ERROR)
            dlg.ShowModal()
            dlg.Destroy()
            
            event.Skip()
    def Set_Context_Menu(self):
        
        # Context menu 1 
        self.Context_Menu = wx.Menu()
        
        C_Menu_Undo = wx.MenuItem(self.Context_Menu, wx.NewId(), '&Undo                             Ctrl+Z')
        self.Context_Menu.AppendItem(C_Menu_Undo)        
        self.Context_Menu.Bind(wx.EVT_MENU, self.OnUndo, C_Menu_Undo)
        C_Menu_Undo.Enable(False)
        
        C_Menu_Redo = wx.MenuItem(self.Context_Menu, wx.NewId(), '&Redo                              Ctrl+Y')
        self.Context_Menu.AppendItem(C_Menu_Redo)        
        self.Context_Menu.Bind(wx.EVT_MENU, self.OnRedo, C_Menu_Redo)
        C_Menu_Redo .Enable(False)
        
        self.Context_Menu.AppendSeparator()
        
        C_Menu_Cut = wx.MenuItem(self.Context_Menu, wx.NewId(), 'Cu&t                                   Ctrl+X')
        self.Context_Menu.AppendItem(C_Menu_Cut)        
        self.Context_Menu.Bind(wx.EVT_MENU, self.OnCut, C_Menu_Cut)

        C_Menu_Copy= wx.MenuItem(self.Context_Menu, wx.NewId(), '&Copy                               Ctrl+C')
        self.Context_Menu.AppendItem(C_Menu_Copy)
        self.Context_Menu.Bind(wx.EVT_MENU, self.OnCopy, C_Menu_Copy)
        
        C_Menu_Paste= wx.MenuItem(self.Context_Menu, wx.NewId(), '&Paste                               Ctrl+V ')
        
        self.Context_Menu.AppendItem(C_Menu_Paste)
        self.Context_Menu.Bind(wx.EVT_MENU, self.OnPaste, C_Menu_Paste)        #C_Menu_Paste.Enable(False)      
        
        
        
        C_Menu_Delete= wx.MenuItem(self.Context_Menu, wx.NewId(), '&Delete')
        self.Context_Menu.AppendItem(C_Menu_Delete)
        self.Context_Menu.Bind(wx.EVT_MENU, self.OnDelete, C_Menu_Delete)
        # End of Context Menu 1
        
        #Menu 2(Add/Remove)
        self.Context_Menu2 = wx.Menu()
        
        self.C_Menu_Add = wx.MenuItem(self.Context_Menu2, 140, '&Add Row             \n ')
        self.Context_Menu2.AppendItem(self.C_Menu_Add)        
        self.Context_Menu2.Bind(wx.EVT_MENU, self.OnAddClick, self.C_Menu_Add)
        self.C_Menu_Add.Enable(False)
        
        self.C_Menu_Remove = wx.MenuItem(self.Context_Menu2, 141, '&Remove Row              \n')
        self.Context_Menu2.AppendItem(self.C_Menu_Remove)        
        self.Context_Menu2.Bind(wx.EVT_MENU, self.OnRemoveClick, self.C_Menu_Remove)
        self.C_Menu_Remove.Enable(False)
        
    def OnPromotion_List(self,event):
        school=self.DB.Get_School_Name()
        deo=self.DB.Get_School_DEO()
        #print deo,school,"printing1"
        working_days=self.DB.Get_Working_Days(self.YEAR,'3')
        self.P=Promotion_List(self.YEAR,school,self.CLASS,self.DIV,deo,working_days) 
        self.P.run()
        #self.P=None
    def OnImport(self,event):
        I=import_excel(self.YEAR,self.CLASS,self.DIV)
        #self.refresh()
    def OnStatistics(self,event):
        
        St=Statistics()
        St.TE_Total("9B")
        
        
    def OnMenu_Performance_T2_Only(self,event):
        
        import subprocess
        if STD=='9' or STD=='10':
            
            
            R=Partial_Report()
            
            R.SetTable_Style()
            
            R.PopulateTables(self.YEAR,self.CLASS,self.DIV,self.TERM_INDEX)
            R.Save()
            
            
            
            
            
            
            
            
            
        else:
            try:
                
                R=Partial_Report_8()

                R.SetTable_Style()

                R.PopulateTables(self.YEAR,self.CLASS,self.DIV,self.TERM_INDEX)
                R.Save()
                    
            except:
                
                dlg = wx.MessageDialog(None, 'Error Occured', '',wx.OK | wx.ICON_ERROR)                  
                dlg.ShowModal()
                dlg.Destroy()   
            
    def OnMenu_PerformanceReport(self,event):
        
        import subprocess
        
        if STD=='9' or STD=='10':
            
            #self.Sheet.Refresh()
            R=Report()
            
            R.SetTable_Style()
            
            R.PopulateTables(self.YEAR,self.CLASS,self.DIV,self.TERM_INDEX)
            R.Save()
            
            
            
            
            
            
            
            
            
        else:
            try:
                
                R=Report_8()

                R.SetTable_Style()

                R.PopulateTables(self.YEAR,self.CLASS,self.DIV,self.TERM_INDEX)
                R.Save()
                    
            except:
                
                dlg = wx.MessageDialog(None, 'Error in File', '',wx.OK | wx.ICON_INFORMATION)                  
                dlg.ShowModal()
                dlg.Destroy()   
            
    def OnUndo(self,event):
        #print "undo"
        self.Undo()
        
    def OnRedo(self,event):
        self.Redo()
        
            
    def OnCopy(self,event):
        self.Copy()
        
    def OnCut(self,event):
        self.Cut()
        
    def OnPaste(self,event):
        self.Paste()
        
    def OnDelete(self,event):
        self.Delete()
        
    def OnMenu_Exit(self,event):
        
        #print "grid closs"
        
        self.Close()
        event.Skip()
        
    def OnMenu_CE(self,event):
        #print "CE menu"
        CE=CE_TE(self)
        CE.ShowModal()
        CE.Center()
        
        
    
   
    def OnPaint(self,event):
        
        
        base_cell_size=self.grid_1.GetColSize(0)+self.grid_1.GetColSize(1)+self.grid_1.GetColSize(2)
        bal=self.Size[0]-base_cell_size
        cell_size=bal/self.grid_1.GetNumberCols()
        for i in range(3,self.grid_1.GetNumberCols(),1):
            self.grid_1.SetColSize(i,cell_size)
        event.Skip()
    def OnRightDown(self,event):
        
       #self.PopupMenu(self.Context_Menu, event.GetPosition())
        event.Skip()

        
    def  onKeyPress(self,event):
        
        global SUBJECT
        if self.IsRangeSelected:
            if event.ControlDown() and event.GetKeyCode() == 67: # Ctrl + C
                #print "Ctrl+C"
                self.Copy()
                self.dataObj = wx.TextDataObject()
                self.dataObj.SetText("hello")
                #print "text ",self.dataObj.GetText()#self.text.GetValue())
            
            
                
            elif event.ControlDown() and event.GetKeyCode() == 88: #Ctrl X
                #print "ctrl x"
                self.Copy()
                self.Delete()
                
            
            
            if event.GetKeyCode()==wx.WXK_DELETE :
                
                
                self.Delete()
                
        if event.ControlDown() and event.GetKeyCode() == 86: #CTRl +V
               
                self.Paste()
                
        elif event.ControlDown() and event.GetKeyCode() == 83: #Ctrl s
                
                if self.button_1.Enabled==True:
                    
                    self.Save_Clicked(None)# invoking save_clicked event
            
                
        
        event.Skip()
        
    
        
    
    
    def OnRangeSelected(self, event): # wxGlade: MyFrame.<event_handler>
        
        #print "range seleted"
        if event.Selecting():
            
            self.IsRangeSelected=True
            self.Selected_TopLeft=event.GetTopLeftCoords()
            self.Selected_BottomRight=event.GetBottomRightCoords()
            #self.bitmap_button_1.Enabled=True
            #self.bitmap_button_2.Enabled=True
            
        else:
            
            self.IsRangeSelected=False
            self.Selected_TopLeft=(-1,-1)
            self.Selected_BottomRight=(-1,-1)
            #self.bitmap_button_1.Enabled=False
            #self.bitmap_button_2.Enabled=False
          
        
        event.Skip()
        
    def Copy(self):
        #print "Copy method"
        # Number of rows and cols
        rows = self.grid_1.GetSelectionBlockBottomRight()[0][0] - self.grid_1.GetSelectionBlockTopLeft()[0][0] + 1
        cols = self.grid_1.GetSelectionBlockBottomRight()[0][1] - self.grid_1.GetSelectionBlockTopLeft()[0][1] + 1
       
        # data variable contain text that must be set in the clipboard
        data = ''
       
        # For each cell in selected range append the cell value in the data variable
        # Tabs '\t' for cols and '\r' for rows
        for r in range(rows):
            for c in range(cols):
                data = data + str(self.grid_1.GetCellValue(self.grid_1.GetSelectionBlockTopLeft()[0][0] + r, self.grid_1.GetSelectionBlockTopLeft()[0][1] + c))
                if c < cols - 1:
                    data = data + '\t'
            data = data + '\n'
            #print data
        # Create text data object
        clipboard = wx.TextDataObject()
        # Set data object value
        clipboard.SetText(data)
        # Put the data in the clipboard
        if wx.TheClipboard.Open():
            wx.TheClipboard.SetData(clipboard)
            wx.TheClipboard.Close()
        else:
            wx.MessageBox("Can't open the clipboard", "Error")
            
    def Paste(self):
        #print "Paste method"
        self.paste_lock=True
        
        clipboard = wx.TextDataObject()
        if wx.TheClipboard.Open():
            wx.TheClipboard.GetData(clipboard)
            wx.TheClipboard.Close()
        else:
            wx.MessageBox("Can't open the clipboard", "Error")
            return 0
        
        
        
        data = clipboard.GetText()
        table = []
        y = -1
        # Convert text in a array of lines
        
        
        # Checks if copied data overflows the available cells
        copied_rows=len(data.splitlines())
        copied_cols=len(data.splitlines()[0].split('\t'))
        
        no_rows=self.grid_1.GetNumberRows()
        no_cols=self.grid_1.GetNumberCols()
        
        
        
        if (self.grid_1.GetGridCursorRow()+copied_rows)>no_rows or (self.grid_1.GetGridCursorCol()+copied_cols)>no_cols:
            
            msg="Copied data will overflow the available cells. Do you still want to paste?"
            dlg = wx.MessageDialog(self, msg,"Warning", wx.YES_NO | wx.ICON_QUESTION)
            result = dlg.ShowModal()# == wx.ID_YES
            if result==wx.ID_NO:
                return 0
            dlg.Destroy()
            #wx.MessageBox("Copied data exceeds the available cells. Do you still want to paste?", "Error")
        
        #print "no of rows",len(data.splitlines()),"cols",len(data.splitlines()[0].split('\t'))
        
        for r in data.splitlines():
            y = y +1
            x = -1
            # Convert c in a array of text separated by tab
            for c in r.split('\t'):
                x = x +1
                # Checking if pasted to readonly cells"
                if self.SUBJECT=="Basic Science" and (self.grid_1.GetGridCursorCol() + x)>8:
                
                    continue
                
                elif self.SUBJECT_INDEX<10 and (self.grid_1.GetGridCursorCol() + x)>4:
                    
                    continue
                # end of chekin readonly
                #if self.Validate(self.grid_1.GetGridCursorRow() + y, self.grid_1.GetGridCursorCol() + x, c):
                self.current_cell_value=self.grid_1.GetCellValue(self.grid_1.GetGridCursorRow() + y, self.grid_1.GetGridCursorCol() + x)
                self.grid_1.SetCellValue(self.grid_1.GetGridCursorRow() + y, self.grid_1.GetGridCursorCol() + x,c)
                self.OnAnyChange(self.grid_1.GetGridCursorRow() + y, self.grid_1.GetGridCursorCol() + x, c)
                
                
        self.paste_lock=False
    def Cut(self):
        self.Copy()
        self.Delete()
        
    def Delete(self):
        
        if self.Selected_TopLeft[0]!=-1:
            for i in range(self.Selected_TopLeft[0],self.Selected_BottomRight[0]+1,1):
                        for j in range(self.Selected_TopLeft[1],self.Selected_BottomRight[1]+1,1):
                            
                            if self.SUBJECT_INDEX==11:
                                if j<9 or j==13: #not read only cols
                                    
                                    #self.grid_1.SetCellValue(i,j,"")
                                    self.current_cell_value=self.grid_1.GetCellValue(i,j)
                                    self.grid_1.SetCellValue(i,j,"")
                                    self.OnAnyChange(i,j,"")
                                    #self.CalculateTotal(i)
                            else:
                                if j!=5 and j!=6:
                                    #self.grid_1.SetCellValue(i,j,"")
                                    self.current_cell_value=self.grid_1.GetCellValue(i,j)
                                    self.grid_1.SetCellValue(i,j,"")
                                    self.OnAnyChange(i,j,"")
                                    
                                    #self.CalculateTotal(i)
                                    
        #print "end of delete"
        
        
    def On_label_right_click(self, event):  # wxGlade: MyFrame.<event_handler>
        self.remove_row_index=event.GetRow()
        if self.remove_row_index !=-1:
            
            self.PopupMenu(self.Context_Menu2, event.GetPosition())
        
        event.Skip()
        
    def OnEditorCreated(self, event): # wxGlade: MyFrame.<event_handler>
        #print "Event handler `OnEditorCreated' not implemented"
        event.Skip()

    def OnEditorHidden(self, event): # wxGlade: MyFrame.<event_handler>
        #print "Event handler `OnEditorHidden' not implemented"
        
        event.Skip()

    def OnSelectCell(self, event): # wxGlade: MyFrame.<event_handler>
        #print "Event handler `OnSelectCell' not implemented"
       
        event.Skip()

    def OnCellRightClick(self, event): # wxGlade: MyFrame.<event_handler>
        #print "Event handler `OnCellRightClick' not implemented"
        
        
        # Begin Enable/Disable Copy/Paste and all
        if wx.TheClipboard.Open():
            clipboard = wx.TextDataObject()
            if not wx.TheClipboard.GetData(clipboard):
             
                self.Context_Menu.MenuItems[5].Enable(False)# Disabling Paste Menu Item if clipboard mpty
            
            
            else:
                
                self.Context_Menu.MenuItems[5].Enable(True)# Disabling Paste Menu Item if clipboard mpty
               
            wx.TheClipboard.Close()
        else:
            self.Context_Menu.MenuItems[5].Enable(False)# Disabling Paste Menu Item if clipboard mpty

        
        if self.UNDO_INDEX>=9 or self.UNDO_INDEX>=(len(self.UNDO_LIST)-1):
            
            self.Context_Menu.MenuItems[0].Enable(False)
            
        else:
            self.Context_Menu.MenuItems[0].Enable(True)
            
        if self.UNDO_INDEX==0:
            self.Context_Menu.MenuItems[1].Enable(False)
            
        else:
            self.Context_Menu.MenuItems[1].Enable(True)
        #End of Undo?redo
        
        self.PopupMenu(self.Context_Menu, event.GetPosition())
        #event.Skip()

    def OnEditorShown(self, event): # wxGlade: MyFrame.<event_handler>
       # print "Event handler `OnEditorShown' not implemented"
        self.current_cell_value=self.grid_1.GetCellValue(event.GetRow(), event.GetCol())
        event.Skip()    
    

    def set_properties(self,year,clas,div,term_indx,strength):
        
     
        
        self.YEAR=year
        
        self.CLASS=clas
        self.DIV=div       
        self.TERM_INDEX=term_indx
        self.STRENGTH=strength
        self.SUBJECT_INDEX=-1
        if self.TERM_INDEX==0:
            term='I'
        elif self.TERM_INDEX==1:
            term='II'
        elif self.TERM_INDEX==2:
            term='Annual'
        self.CURRENT_LIST=[]
        self.UNDO_LIST=[]
        self. SUBJECT=""
        self.CHANGES_TO_BE_SAVED=False
        
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("Score Sheet")
        self.SetSize((700, 550))
        
        self.combo_box_1.SetMinSize((150, 29))
        self.combo_box_1.SetSelection(0)
        self.combo_box_2.SetMinSize((150, 29))
        self.combo_box_2.SetSelection(0)
        
        
        self.label_1.SetLabel('CLASS: '+self.CLASS)
        self.label_2.SetLabel('DIV: '+self.DIV)
        self.label_3.SetLabel('TERM: '+term)
        
        self.grid_1.SetRowLabelSize(25)
        self.grid_1.CreateGrid(self.STRENGTH, 7)
        self.grid_1.SetColLabelValue(0, "Admission No")
        self.grid_1.SetColSize(0, 100)
        self.grid_1.SetColLabelValue(1, "Roll No")
        self.grid_1.SetColSize(1, 80)
        self.grid_1.SetColLabelValue(2, "Name")
        self.grid_1.SetColSize(2, 350)        
        self.grid_1.SetColLabelValue(3, "CE")
        self.grid_1.SetColSize(3, 110)
        self.grid_1.SetColLabelValue(4, "TE")
        self.grid_1.SetColSize(4, 110)
        self.grid_1.SetColLabelValue(5, "Total")
        self.grid_1.SetColSize(5, 110)
        self.grid_1.SetColLabelValue(6, "Grade")
        self.grid_1.SetColSize(6, 110)
        
        
        
        self.label_1.SetFont(wx.Font(11, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.label_2.SetFont(wx.Font(11, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.label_3.SetFont(wx.Font(11, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.label_4.SetFont(wx.Font(11, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.label_5.SetFont(wx.Font(11, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        
        self.button_1.Enabled=False
        
        self.button_1.SetSize(THEME.BUTTON_SIZE_NORMAL)
        self.button_2.SetSize(THEME.BUTTON_SIZE_NORMAL)
        
        
        self.__do_layout()
        self.Set_ReadOnly()
        
        
        
        self.grid_1.SetBackgroundColour(THEME.WINDOW_BG_COLOR)
        self.SetBackgroundColour(THEME.WINDOW_BG_COLOR)
        
       
        self.button_1.SetForegroundColour(THEME.BUTTON_FG_COLOR_WHITE)
        self.button_2.SetForegroundColour(THEME.BUTTON_FG_COLOR_WHITE)
        
        self.button_1.SetBackgroundColour(THEME.BUTTON_BG_COLOR_GREEN)
        self.button_2.SetBackgroundColour(THEME.BUTTON_BG_COLOR_GREEN)
       
        
        self.label_1.SetForegroundColour(THEME.LABEL_FG_COLOR_WHITE)
        
        
        self.label_2.SetForegroundColour(THEME.LABEL_FG_COLOR_WHITE)
        
        
        self.label_3.SetForegroundColour(THEME.LABEL_FG_COLOR_WHITE)
        
        
        self.label_4.SetForegroundColour(THEME.LABEL_FG_COLOR_WHITE)
        
        
        self.label_5.SetForegroundColour(THEME.LABEL_FG_COLOR_WHITE)
        
        
        self.label_6.SetForegroundColour(THEME.LABEL_FG_COLOR_WHITE)
        
        
        #self.grid_1.SetBackgroundColour(THEME.WINDOW_BG_COLOR)
        

    def __do_layout(self):
        
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3 = wx.BoxSizer(wx.VERTICAL)        
        sizer_4= wx.BoxSizer(wx.VERTICAL)    
            
        sizer_2.Add(self.combo_box_1, 0, wx.LEFT, 150)
        sizer_2.Add(self.button_1, 0, wx.LEFT|wx.RIGHT, 50)
        sizer_2.Add(self.button_2, 0, 0, 0)
        sizer_2.Add(self.label_6 , 0, wx.LEFT|wx.RIGHT, 40)        
        sizer_2.Add(self.combo_box_2, 0, wx.RIGHT, 40)     
           
        sizer_3.Add(self.label_1, 0, wx.TOP|wx.BOTTOM, 5)
        sizer_3.Add(self.label_2, 0, wx.TOP|wx.BOTTOM, 5)
        sizer_3.Add(self.label_3, 0, wx.TOP|wx.BOTTOM, 5)
        
        sizer_4.Add(self.label_4, 0, wx.TOP|wx.BOTTOM, 5)
        sizer_4.Add(self.label_5, 0, wx.TOP|wx.BOTTOM, 5)
        
        sizer_2.Add(sizer_3, 1, wx.EXPAND, 0)        
        sizer_2.Add(sizer_4, 1, wx.EXPAND, 0)
        
        sizer_1.Add(sizer_2, 1, wx.TOP|wx.EXPAND, 10)
        sizer_1.Add(self.grid_1, 5, wx.EXPAND, 0)
        
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade
        
    def Save_Clicked(self, event): # wxGlade: MyFrame.<event_handler>
        
        SUBJ=["LANG","MAL","ENGLISH","HINDI","SS","PHYSICS","CHEMISTRY","BIOLOGY","MATHEMATICS","IT","ATTENDANCE","WORK_EXP","ART_EDU","PHY_EDU"]
        
        
        
        Term="T"+str(int(self.TERM_INDEX)+1)
        col_indx=0
        BS_Index=0 # In BS idntifies phy,chem,bio
        for each_subj in self.CURRENT_LIST: #Multiple subj only in the case of Basic Science
            
            
            
            i=0
            
            
            
            for row in each_subj: 
                
                if i==0: #to skip the the fist item 
                    i+=1
                    #print row
                    continue
                
                
                #print row
                if row[0]==True: # if Edited Sattus is True
                    
                    if self.SUBJECT_INDEX==10:#Attendance
                        
                       
                        # print "attndnc"
                        query1="UPDATE STUDENT SET ADMISSION_NO=?,NAME=? WHERE ID=?"
                        
                        query2="UPDATE "+Term+" SET ROLL=?,ATTENDANCE=? WHERE ID=?"
                        
                        #print "queries\n",query1,"\n",query2
                        
                        self.DB.Execute(query1,(row[2],row[3],row[1],))
                        
                        self.DB.Execute(query2,(row[5],row[6],row[4],))
                        
                        
                    else: #Subjects
                        
                        if self.SUBJECT=="Basic Science" : #Onlt the first time,handles...
                            #print "BS"
                            
                            BS=["PHYSICS","CHEMISTRY","BIOLOGY"]
                                
                            
                            #if BS_Index==0:   #first instance            
                                  
                            #print "indx 0",row                                    
                            query1="UPDATE STUDENT SET ADMISSION_NO=?,NAME=? WHERE ID=?"
                            self.DB.Execute(query1,(row[2],row[3],row[1],))
                                
                            subj=BS[int(BS_Index)]
                            #print "subj",subj
                            
                            query2="UPDATE "+Term+" SET ROLL=?,"+subj+"_CE=?,"+subj+"_TE=? WHERE ID=?"
                            #print query2
                            #print  row[5],row[6],row[8],row[4]
                            self.DB.Execute(query2,(row[5],row[6],row[8],row[4],))
                            
                                
                            
                        else:
                            
                            
                            #print "othr subj"
                            minus=0
                            if self.SUBJECT_INDEX>11:minus=1
                            
                            subj=SUBJ[int(self.SUBJECT_INDEX)-1]
                            
                            query1="UPDATE STUDENT SET ADMISSION_NO=?,NAME=? WHERE ID=?"
                            
                            query2="UPDATE "+Term+" SET ROLL=?,"+subj+"_CE=?,"+subj+"_TE=? WHERE ID=?"
                            
                            #print "queries\n",query1,"\n",query2
                            
                            self.DB.Execute(query1,(row[2],row[3],row[1],))
                            
                            self.DB.Execute(query2,(row[5],row[6],row[8],row[4],))
                            
                            
                
                
                i+=1
                
            col_indx+=2
            BS_Index+=1 
            
        
        self.DB.Commit()
        self.button_1.Enabled=False
        self.CHANGES_TO_BE_SAVED=False
        if (self.SILENT_SAVE)==False:
            msg="Successfully Saved"
            dlg = wx.MessageDialog(self, msg, '',wx.OK | wx.ICON_INFORMATION)                  
            dlg.ShowModal()
            dlg.Destroy()

    def Cancel_Clicked(self, event): # wxGlade: MyFrame.<event_handler>
        #print "Event handler `Cancel_Clicked' not implemented!"
        
        self.Close()
        event.Skip()

    def OnText(self, event): # wxGlade: MyFrame.<event_handler>
        #print "Event handler `OnText' not implemented!"
        event.Skip()

    def OnEnter(self, event): # wxGlade: MyFrame.<event_handler>
        #print "Event handler `OnEnter' not implemented!"
        event.Skip()
        
    def GetCE(self):
        
        if self.SUBJECT_INDEX!=-1:
            try: #If subj is attendance,select subj, or other error returns -1
                #In that case, receiving to two variables generates error s.cell
                # And in case of error values can be set to zero
                self.MAX_CE,self.MAX_TE=self.DB.Get_CE_TE(self.YEAR,self.CLASS,self.SUBJECT_INDEX)
            except:
                self.MAX_CE,self.MAX_TE=(0,0)
        else:
                self.MAX_CE,self.MAX_TE=(0,0)
            
        
        #Rests CE,TE in the Label    
        if self.SUBJECT=="Basic Science":
            self.label_4.SetLabel("MAX_CE: "+str(self.MAX_CE )+"*3="+str(int(self.MAX_CE)*3))
            
            self.label_5.SetLabel("MAX_TE: "+str(self.MAX_TE) +"*3="+str(int(self.MAX_TE)*3))           
            
            
        else:
            
            self.label_4.SetLabel("MAX_CE: "+str(self.MAX_CE))
            
            self.label_5.SetLabel("MAX_TE: "+str(self.MAX_TE))
        #Endf Reset

    def OnCombo(self, event): # wxGlade: MyFrame.<event_handler>
        
        
        
        
        if self.CHANGES_TO_BE_SAVED and self.button_1.Enabled==True:
            
            dlg = wx.MessageDialog(self, "Changing Subjects will lose unsaved changes.\n Do you want to Save it?",'', wx.YES_NO|wx.YES_DEFAULT | wx.ICON_QUESTION)
            

            if dlg.ShowModal() == wx.ID_YES:
                
                self.Save_Clicked(None)
        
        
        
        if self.combo_box_1.Value!="Select Subject":
            
            self.SUBJECT=self.combo_box_1.Value
            self.C_Menu_Add.Enable(True)
            self.C_Menu_Remove.Enable(True)
        else:
            self.C_Menu_Add.Enable(False)
            self.C_Menu_Remove.Enable(False)
        
        # if Subj is Basic Sc Adds Cols and Sets values
        if self.combo_box_1.Value =="Basic Science":
            
            if self.grid_1.GetNumberCols()==7: # if last time other subj appends 6 cols
                
                self.grid_1.AppendCols(6,1)
                
            elif self.grid_1.GetNumberCols()==4:
                self.grid_1.AppendCols(9,1)
            
            self.grid_1.SetColLabelValue(3, "Phy CE")
            self.grid_1.SetColSize(3, 80)
            self.grid_1.SetColLabelValue(4, "Phy TE")
            self.grid_1.SetColSize(4, 80)
            self.grid_1.SetColLabelValue(5, "Chem CE")
            self.grid_1.SetColSize(5, 80)
            self.grid_1.SetColLabelValue(6, "Chem TE")
            self.grid_1.SetColSize(6, 80)
            self.grid_1.SetColLabelValue(7, "Bio CE")
            self.grid_1.SetColSize(7, 80)
            self.grid_1.SetColLabelValue(8, "Bio TE")
            self.grid_1.SetColSize(8, 80)
            self.grid_1.SetColLabelValue(9, "BS CE")
            self.grid_1.SetColSize(9, 80)
            self.grid_1.SetColLabelValue(10, "BS TE")
            self.grid_1.SetColSize(10, 80)
            self.grid_1.SetColLabelValue(11, "BS Total")
            self.grid_1.SetColSize(11, 80)
            self.grid_1.SetColLabelValue(12, "BS Grade")
            self.grid_1.SetColSize(12, 80)
            
        elif self.combo_box_1.Value =="Attendance":
            
            if self.grid_1.GetNumberCols()>10:  # iflast item was Basic Sc, removes 6 cols
            
                self.grid_1.DeleteCols(3,9)  
             
               
            elif self.grid_1.GetNumberCols()==7: # if last item Other subj removes, 3 cols
                self.grid_1.DeleteCols(3,3) 
                
            self.grid_1.SetColLabelValue(3, "Attendance")
            self.grid_1.SetColSize(3, 130)
            
        else: # Newly selected is Other Subj
            
            if self.grid_1.GetNumberCols()>10: # iflast item was Basic Sc
            
                self.grid_1.DeleteCols(4,6)   
            elif self.grid_1.GetNumberCols()==4:
                
                self.grid_1.AppendCols(3,1)
                
                         
            self.grid_1.SetColLabelValue(3, "CE")
            self.grid_1.SetColSize(3, 120)           
            self.grid_1.SetColLabelValue(4, "TE")
            self.grid_1.SetColSize(4, 120)           
            self.grid_1.SetColLabelValue(5, "Total")
            self.grid_1.SetColSize(5, 120)            
            self.grid_1.SetColLabelValue(6, "Grade")
            self.grid_1.SetColSize(6, 120)
             # last item attendance
                
                     
        self.grid_1.ForceRefresh()        
        self.SUBJECT=self.combo_box_1.Value
        
        
        # global value SUBJECT_INDEX isused to locate the correct cell in the spread sheet
        if self.combo_box_1.Value=="Select Subject":
            
            self.SUBJECT_INDEX=-1
            
        if self.combo_box_1.Value =="First Language":
            self.SUBJECT_INDEX=0
        
        elif  self.combo_box_1.Value =="Malayalam II":
            
            self.SUBJECT_INDEX=1
        elif self.combo_box_1.Value =="English":
            
            self.SUBJECT_INDEX=2
            
        elif self.combo_box_1.Value =="Hindi":
            
            self.SUBJECT_INDEX=3
            
        elif self.combo_box_1.Value =="Social Science":
            
            self.SUBJECT_INDEX=4
            
        elif self.combo_box_1.Value =="Physics":
            
            self.SUBJECT_INDEX=5
        elif self.combo_box_1.Value =="Chemistry":
            
            self.SUBJECT_INDEX=6
            
        elif self.combo_box_1.Value =="Biology":
            
            self.SUBJECT_INDEX=7
            
        elif self.combo_box_1.Value =="Mathematics":
            
            self.SUBJECT_INDEX=8
        
        elif self.combo_box_1.Value =="I.T":
        
            self.SUBJECT_INDEX=9
       
                
        elif self.combo_box_1.Value =="Attendance":
            
            self.SUBJECT_INDEX=10
        elif self.combo_box_1.Value =="Basic Science":
            
            self.SUBJECT_INDEX=11
            
        elif self.combo_box_1.Value =="Work Experience":
            
            self.SUBJECT_INDEX=12

        elif self.combo_box_1.Value =="Art Education":
            self.SUBJECT_INDEX=13
           
        elif self.combo_box_1.Value =="Physcal & Health Edu":
            
            self.SUBJECT_INDEX=14
            
        if self.SUBJECT_INDEX==10:# attendance:
            self.label_4.SetLabel("MAX_CE: NA")
            
            self.label_5.SetLabel("MAX_TE: NA")
        else:
            self.GetCE()
        self.Set_ReadOnly()
    
        self.Clear_Score()
        if self.SUBJECT_INDEX!=-1: # IF not SElect Subject
            self.Populate_Score()
        self.button_1.Enabled=False
        self.CHANGES_TO_BE_SAVED=False
        
       
        event.Skip()
    def OnClose(self,event):
        
        
        
        if self.CHANGES_TO_BE_SAVED:
            dlg=wx.MessageDialog(self, "There are Unsaved Changes..Don't You Want to Save them?",'', wx.YES_NO|wx.YES_DEFAULT | wx.ICON_QUESTION)
            #dlg = wx.MessageDialog(None, )
            #dlg = wx.MessageDialog(None, "Don't You Want to Save Changes?", wx.NO_DEFAULT | wx.ICON_QUESTION)
            if dlg.ShowModal() == wx.ID_YES:
                
                self.Save_Clicked(None)
        self.Parent.IsGridChild=0
        self.Parent.Show()
        self.P=None
        self.DB=None
        event.Skip()
    def OnAddClick(self, event): # wxGlade: MyFrame.<event_handler>
        
        add_student_class=Add_Student(self)
        #self.Enabled=False
        add_student_class.ShowModal()

        
        student_info=add_student_class.STUDENT_INFO
        
        add_student_class.Destroy()
        
        
        if student_info!=[]:
            
            if self.remove_row_index==self.grid_1.GetNumberRows()-1:
                
                self.grid_1.AppendRows(1)
                
                self.grid_1.SetCellValue(self.grid_1.GetNumberRows()-1,0,student_info[0])
                self.grid_1.SetCellValue(self.grid_1.GetNumberRows()-1,1,student_info[1])
                self.grid_1.SetCellValue(self.grid_1.GetNumberRows()-1,2,student_info[2])
                
                
            else:
                
                self.grid_1.InsertRows(self.remove_row_index,1,1)
                
                self.grid_1.SetCellValue(self.remove_row_index,0,student_info[0])
                self.grid_1.SetCellValue(self.remove_row_index,1,student_info[1])
                self.grid_1.SetCellValue(self.remove_row_index,2,student_info[2])
            
        #raw_input("cont")
        self.Set_ReadOnly()
        self.grid_1.ForceRefresh()
        event.Skip()

    def OnRemoveClick(self, event): # wxGlade: MyFrame.<event_handler>
        
        self.remove_row_index
        msg="This student along with all data will be deleted\nAre you sure you want to  Delete this row?"
        if wx.MessageBox(msg, "Want to Delete?", wx.YES_NO) == wx.YES:
        
                           
                   
            removed_item=self.CURRENT_LIST[0][self.remove_row_index+1]
            #print "removing",removed_item
            
            self.DB.RemoveScore(removed_item[4])     #Passing score id
            
            #Checking if the student has any other record in any other  div
            query='SELECT * FROM T1 WHERE STUDENT_ID=?'
            self.DB.cur.execute(query,(removed_item[1],))
            if self.DB.cur.fetchone()==None:
                self.DB.RemoveStudent(removed_item[1])  #passing student_id
            else:
                print 'other records exixts'
           
                                
            if self.SUBJECT=="Basic Science":
                
                
                removed_item2=self.CURRENT_LIST[1][self.remove_row_index]
                removed_item3=self.CURRENT_LIST[2][self.remove_row_index]
                self.CURRENT_LIST[1].remove(removed_item2)
                self.CURRENT_LIST[2].remove(removed_item3)
            
                
            self.grid_1.DeleteRows(self.remove_row_index,1)
                    #except:
                        
                    #print "Error in removing row"
                        
                    
        event.Skip()
        
    def PopulateBasic(self):
        
        # populates the basic info when loads initially
        
        
        term=str(int(self.TERM_INDEX)+1)
        div_id=self.DB.Get_Div_Id(self.YEAR,self.CLASS,self.DIV)
        List= self.DB.Score_and_Roll(term,div_id,"0")
        
        
        
        
        i=0
        for row in List:
            
            if i==0: #to skip the the fist item 
                i+=1
                continue
            
            
            
            self.grid_1.SetCellValue (i-1,0, row[2])
            self.grid_1.SetCellValue (i-1,1, str(row[5]))
            self.grid_1.SetCellValue (i-1,2, row[3])
            
            
           
            
            
            i+=1
        
        
    def Populate_Score(self):
        
        
        term=str(int(self.TERM_INDEX)+1)
        
        div_id=self.DB.Get_Div_Id(self.YEAR,self.CLASS,self.DIV)
        
        if self.SUBJECT_INDEX==11: #Basic Science: Adds Phy,Chem and Bio
            phy_indx=5
            chem_indx=6
            bio_indx=7
           
            self.CURRENT_LIST= [self.DB.Score_and_Roll(term,div_id,str(phy_indx))]
            self.CURRENT_LIST+= [self.DB.Score_and_Roll(term,div_id,str(chem_indx))]
            self.CURRENT_LIST+= [self.DB.Score_and_Roll(term,div_id,str(bio_indx))]
        
            
        else: #other Subj
        
            self.CURRENT_LIST= [self.DB.Score_and_Roll(term,div_id,str(self.SUBJECT_INDEX))]
        
        #print self.CURRENT_LIST
        self.Populate_From_Current_List()
        
    def Populate_From_Current_List(self):
        
        col_indx=0
        for each_subj in self.CURRENT_LIST: #Multiple subj only in the case of Basic Science
        
            i=0
            
            
            
            for row in each_subj: 
                
                if i==0: #to skip the the fist item 
                    i+=1
                    #print row
                    continue
                
                
                #print row
                if self.SUBJECT_INDEX==10:#Attendance
                    
                    self.grid_1.SetCellValue (i-1,0, str(row[2]))# Ad No
                    self.grid_1.SetCellValue (i-1,1, str(row[5]))# Roll
                    self.grid_1.SetCellValue (i-1,2, str(row[3])) #Name    
                    self.grid_1.SetCellValue (i-1,3, str(row[6]))# Atndc
                    
                else: #Subjects
                    
                    
                    self.grid_1.SetCellValue (i-1,0, str(row[2]))                    
                    
                    self.grid_1.SetCellValue (i-1,1, str(row[5]))                  
                    
                    self.grid_1.SetCellValue (i-1,2, str(row[3]))  
                         
                    
                    self.grid_1.SetCellValue (i-1,3+col_indx, str(row[6]))
                    
                    self.grid_1.SetCellValue (i-1,4+col_indx, str(row[8]))
                    
                    self.CalculateTotal(i-1)#,4+col_indx)
                    
                    
            
                
                i+=1
                
            col_indx+=2
            
    def Set_ReadOnly(self):
        
        
        #print "cols n rows",self.grid_1.GetNumberCols(),self.grid_1.GetNumberRows()
        for i in range(1,self.grid_1.GetNumberCols(),1):
            
            if self.grid_1.GetNumberCols()>8:# =="Basic Science":
                
                for j in range(0,self.grid_1.GetNumberRows(),1):
                
                    if i==9:
                        
                        self.grid_1.SetCellBackgroundColour(j, i, wx.RED)
                        self.grid_1.SetCellTextColour(j,i, wx.BLACK)
                        self.grid_1.SetReadOnly(j,i, True)
                        
                    elif i==10:
                       
                        self.grid_1.SetCellBackgroundColour(j, i, wx.GREEN)
                        self.grid_1.SetCellTextColour(j,i, wx.BLACK)
                        self.grid_1.SetReadOnly(j,i, True)
                    elif i==11:
                        
                        
                        self.grid_1.SetCellBackgroundColour(j, i,  wx.BLUE)
                        self.grid_1.SetCellTextColour(j,i, wx.WHITE)
                        self.grid_1.SetReadOnly(j,i, True)
                    elif i==12:
                       
                        
                        self.grid_1.SetCellBackgroundColour(j, i, wx.BLACK)
                        self.grid_1.SetCellTextColour(j,i, wx.WHITE)
                        self.grid_1.SetReadOnly(j,i, True)
                        
                    else:
                        self.grid_1.SetCellBackgroundColour(j, i, wx.WHITE)
                        self.grid_1.SetCellTextColour(j,i, wx.BLACK)
                        self.grid_1.SetReadOnly(j,i, False)
            else:
                
                for j in range(0,self.grid_1.GetNumberRows(),1):
                    if i==5:
                        
                        self.grid_1.SetCellBackgroundColour(j, i,  wx.BLUE)
                        self.grid_1.SetCellTextColour(j,i, wx.WHITE)
                        self.grid_1.SetReadOnly(j,i, True)
                    elif i==6:
                        
                     
                        self.grid_1.SetCellBackgroundColour(j, i, wx.BLACK)
                        self.grid_1.SetCellTextColour(j,i, wx.WHITE)
                        self.grid_1.SetReadOnly(j,i, True)
                        
                    else:
                        self.grid_1.SetCellBackgroundColour(j, i, wx.WHITE)
                        self.grid_1.SetCellTextColour(j,i, wx.BLACK)
                        self.grid_1.SetReadOnly(j,i, False)
    def CalculateTotal(self,row): #,col ):
       
        
        #print "calculating"
        if self.SUBJECT_INDEX==11: #SUBJECT="Basic Science":
            #Calculates CE
            val1=0 
            if self.grid_1.GetCellValue(row,3)!="":
                val1+=int(self.grid_1.GetCellValue(row,3))
                
            if self.grid_1.GetCellValue(row,5)!="" and self.grid_1.GetCellValue(row,5)!=None:
                val1+=int(self.grid_1.GetCellValue(row,5))
            if self.grid_1.GetCellValue(row,7)!="":
                val1+=int(self.grid_1.GetCellValue(row,7))
             
            #ce tot
            self.grid_1.SetCellValue(row,9,str(val1))
            #end of CE
            
            #Calculates TE
            val2=0
            if self.grid_1.GetCellValue(row,4)!="":
                val2+=int(self.grid_1.GetCellValue(row,4))
            if self.grid_1.GetCellValue(row,6)!="":
                val2+=int(self.grid_1.GetCellValue(row,6))
            if self.grid_1.GetCellValue(row,8)!="":
                val2+=int(self.grid_1.GetCellValue(row,8))   
                           
            #te tot
            self.grid_1.SetCellValue(row,10,str(val2))
            #End of TE
            
            #print "tot=",str(val1+val2)
            self.grid_1.SetCellValue(row,11,str(val1+val2)) #TE+CE
            
            self.CalculateGrade(row)
            
            
            
        else:
            #if (col==3 or col==4):
                
            if self.grid_1.GetCellValue(row,3)!="":#if not empty
                
                val1=int(self.grid_1.GetCellValue(row,3))      #converts to integer  
                                
                
            else:
                val1=0
                #print "ce is zero"
            if self.grid_1.GetCellValue(row,4)!="":
                
                val2=int(self.grid_1.GetCellValue(row,4))
            else:
                val2=0
                #print "te is zero"
            if self.grid_1.GetCellValue(row,3)=="" and self.grid_1.GetCellValue(row,4)=="":# empties total and grade if ce and tte r empty
                self.grid_1.SetCellValue(row,5,"")
                self.grid_1.SetCellValue(row,6,"")
                return 0
            self.grid_1.SetCellValue(row,5,str(val1+val2))
            self.CalculateGrade(row)
            
    def CalculateGrade(self,row):#,col ):
        
        Total_Max_Mark=self.MAX_CE+self.MAX_TE
       
        
        #If ce te individual reset
        if self.CURRENT_LIST[0][row+1][7]!=(None or ''): #not descriminating B.Sc
            
            
            Total_Max_Mark=Total_Max_Mark-self.MAX_CE
            
            Total_Max_Mark+=int(self.CURRENT_LIST[0][row+1][7])
            
            
        if self.CURRENT_LIST[0][row+1][9]!=(None or ''):
            
            Total_Max_Mark=Total_Max_Mark-self.MAX_TE
            Total_Max_Mark+=int(self.CURRENT_LIST[0][row+1][9])
        
        
        
        if self.SUBJECT_INDEX==11: # Basic Science
            
            Total_Max_Mark=Total_Max_Mark*3
            col=11
        else:
            col=5
        
        cell_value=self.grid_1.GetCellValue(row,col)
        if not cell_value:
            cell_value=0
            
        #print "row,col",row,col,"   ",self.grid_1.GetCellValue(row,col)
        
        # Special Grading for VIII
        if STD=="8":
            
            if int(cell_value)>=(Total_Max_Mark)*75/100:
                Grd="A"
            elif int(cell_value)>=(Total_Max_Mark)*60/100:
               Grd="B"
            elif int(cell_value)>=(Total_Max_Mark)*45/100:
                Grd="C"
                
            elif int(cell_value)>=(Total_Max_Mark)*34/100:
                Grd="D"
            else:
                Grd='E'
        else: # Grading for IX & X
        
            if int(cell_value)>=(Total_Max_Mark)*90/100:
                Grd="A+"
            elif int(cell_value)>=(Total_Max_Mark)*80/100:
               Grd="A"
            elif int(cell_value)>=(Total_Max_Mark)*70/100:
                Grd="B+"
                
            elif int(cell_value)>=(Total_Max_Mark)*60/100:
                Grd="B"
            elif int(cell_value)>=(Total_Max_Mark)*50/100:
                Grd="C+"
            elif int(cell_value)>=(Total_Max_Mark)*40/100:
                Grd="C"
            elif int(cell_value)>=(Total_Max_Mark)*30/100:
                Grd="D+"
            elif int(cell_value)>=(Total_Max_Mark)*20/100:
                Grd="D"
            else:
                Grd="E"
            
        if self.SUBJECT_INDEX==11: # Bsic Science
            
            
            self.grid_1.SetCellValue(row,12,Grd)
            
            self.grid_1.SetCellValue(row,11,self.grid_1.GetCellValue(row,11)+"/"+str(Total_Max_Mark))
            
        else:
            
            self.grid_1.SetCellValue(row,6,Grd)
            self.grid_1.SetCellValue(row,5,self.grid_1.GetCellValue(row,5)+"/"+str(Total_Max_Mark))
                
    def IsInteger(self,value):
        
        for i in range(len(value)):
            
            if ord(value[i])<48 or ord(value[i])>57:
                return 0
            
        return 1
        
            
    def OnCellChange(self, event):
        
        #print  "in On cell change"
        value = self.grid_1.GetCellValue(event.GetRow(), event.GetCol())
        self.OnAnyChange(event.GetRow(), event.GetCol(),value)
        #print  "exitin On cell change"
        
        
    def Clear_Score(self):
        #print print "clearing"
        for i in range(self.grid_1.GetNumberRows()):
            
            for j in range(3,self.grid_1.GetNumberCols(),1):
                self.grid_1.SetCellValue(i,j,"")
                
                
    def Validate_All(self,row,col,value):
        
        if col==0:
            
            if not self.Validate_Adm_No(row,col,value)   :
                return 0    
        elif col==1:            
            
            return self.Validate_Roll_No(row,col,value)
        elif col==2:
            return self.Validate_Name(row,col,value)
        
        elif self.SUBJECT=="Attendaance": #attendance
            
            return self.Validate_Attendance(row,col,value)
            
            
        else:
            
            return self.Validate_CE_TE(row,col,value)
            
            
        return 1
    def Validate_Adm_No(self,row,col,value):
        
        
        if not value.isdigit() and value!="":
            dlg = wx.MessageDialog(self, 'Admission No should be integer', '',wx.OK | wx.ICON_ERROR)
            dlg.ShowModal()
            dlg.Destroy()
            return 0
        
        else: # if admission no already exists
            
            
            #here are errors regarding structure of self.CURRENTLIST and how it's identified in row obj
            current_row=self.CURRENT_LIST[0][row]
            
            student_id,ad_no=current_row[1],current_row[2]
            query='SELECT ID,NAME FROM STUDENT WHERE ADMISSION_NO='+str(value)
            result=self.DB.Execute(query)
            if result:
                rows=result.fetchall()
                for row in rows:
                    if str(row[0])!=str(student_id):
                        dlg = wx.MessageDialog(self, 'Admission No Already Alloted to '+row[1], '',wx.OK | wx.ICON_ERROR)
                        dlg.ShowModal()
                        dlg.Destroy()
                        return 0
        return 1
    def Validate_Roll_No(self,row,col,value):
        
        if not value.isdigit() and value !="":
            dlg = wx.MessageDialog(self, 'Roll No should be integer', '',wx.OK | wx.ICON_ERROR)
            dlg.ShowModal()
            dlg.Destroy()
            return 0
        
        else:
            return 1
    def Validate_Name(self,row,col,value):
        return 1
        
    def Validate_CE_TE(self,row,col,value):
        if value!="" and (not value.isdigit()):
            dlg = wx.MessageDialog(self, 'CE should be integer', '',wx.OK | wx.ICON_ERROR)
            dlg.ShowModal()
            dlg.Destroy()
            return 0
        
        else:
            if self.SUBJECT=="Basic Science":
                    
                    if col==3 or col==5 or col==7: #if CE Col
                        
                        if value!="" and int(value)>self.MAX_CE: 
                            msg="Maximum CE for "+self.SUBJECT+" is "+str(self.MAX_CE)
                            dlg = wx.MessageDialog(None, msg, '',wx.OK | wx.ICON_INFORMATION)                            
                            dlg.ShowModal()
                            dlg.Destroy()
                            return 0
                            #self.grid_1.SetCellValue(evt.GetRow(), evt.GetCol(),self.current_cell_value)
                            
                        
                    if col==4 or col==6 or col==9: #if TE Col
                        
                        if value!="" and int(value)>self.MAX_TE: 
                            
                            msg="Maximum TE for "+self.SUBJECT+" is "+str(self.MAX_TE)
                            dlg = wx.MessageDialog(self, msg, '',wx.OK | wx.ICON_INFORMATION)                  
                            dlg.ShowModal()
                            dlg.Destroy()
                            return 0
                            
                        
                        
            elif self.SUBJECT!="Attendance": # if Not Basic Sc
                
                if col==3 : #if CE Col
                    
                    if value!="" and int(value)>self.MAX_CE: 
                        msg="Maximum CE for "+self.SUBJECT+" is "+str(self.MAX_CE)
                        dlg = wx.MessageDialog(self, msg, '',wx.OK | wx.ICON_INFORMATION)                  
                        dlg.ShowModal()
                        dlg.Destroy()
                        return 0
                        
                    
                if col==4 : #if TE Col
                    
                    if value!="" and int(value)>self.MAX_TE: 
                        msg="Maximum TE for "+self.SUBJECT+" is "+str(self.MAX_TE)
                        dlg = wx.MessageDialog(self, msg, '',wx.OK | wx.ICON_INFORMATION)                  
                        dlg.ShowModal()
                        dlg.Destroy()
                        return 0
                        
                    
        return 1
                
    
    def Validate_Attendance(self,row,col,value):
        if not value.isdigit() and value!="":
            dlg = wx.MessageDialog(self, 'Attendance should be integer', '',wx.OK | wx.ICON_ERROR)
            dlg.ShowModal()
            dlg.Destroy()
            return 0
        
        else:
            pass
    def Undo(self):
        #print "in undo"
        self.UNDO_INDEX+=1
        self.CURRENT_LIST=self.UNDO_LIST[self.UNDO_INDEX]
        self.Populate_From_Current_List()
        
        
    def Redo(self):
        #print "in redo"
        self.UNDO_INDEX-=1
        self.CURRENT_LIST=self.UNDO_LIST[self.UNDO_INDEX]
        self.Populate_From_Current_List()
        
    def OnAnyChange(self,row,col,value=None): #This function evoked if any cell is changed
        #print  "in any change"
        
        ##print "WHOLE UNDOlist",self.UNDO_LIST
        
        #self.UNDO_LIST=self.UNDO_L
        # End of Undo
    
        if len(self.CURRENT_LIST)==0:  #Checking if any sub is selected, if not aborts"
            msg="Select One Subject before editing. Then only data can be saved"
            dlg = wx.MessageDialog(self, msg, '',wx.OK | wx.ICON_INFORMATION)
            dlg.ShowModal()
            dlg.Destroy()
           
            self.grid_1.SetCellValue(row, col,self.current_cell_value)
            return 0
                
        
        if self.Validate_All(row, col,value):
            
            
                
                
            if self.SUBJECT=="Basic Science":
                
                #print "Subj BS"
                self.CURRENT_LIST[0][row+1][0]=True # adding row by one bcoz list firt item is metadata
                self.CURRENT_LIST[1][row+1][0]=True
                self.CURRENT_LIST[2][row+1][0]=True
                
                
                """Begin Changing Basic Info"""
                if col==0: # Ad No
                    
                    self.CURRENT_LIST[0][row+1][2]=value
                    self.CURRENT_LIST[1][row+1][2]=value
                    self.CURRENT_LIST[2][row+1][2]=value
                    
                elif col==1:# Roll No
                    
                    self.CURRENT_LIST[0][row+1][5]=value
                    self.CURRENT_LIST[1][row+1][5]=value
                    self.CURRENT_LIST[2][row+1][5]=value
                    
                elif col==2:    # Name
                    
                    self.CURRENT_LIST[0][row+1][3]=value
                    self.CURRENT_LIST[1][row+1][3]=value
                    self.CURRENT_LIST[2][row+1][3]=value
                    
                    """End of Changing Basic Info"""
                
                # Making Change of Score in current List
                elif col==3 or col==5 or col==7 : # CE of Phy,Chem, bio 
                    col_list_index=(col-3)/2 #Identifies phy,chem,bio
                    
                    self.CURRENT_LIST[col_list_index][row+1][6]=value
                elif col==4 or col==6 or col==8: # TE of Phy,Chem,Bio
                    
                    col_list_index=(col-4)/2
                    self.CURRENT_LIST[col_list_index][row+1][8]=value
                    
            else: #IOther SUbjects
                
                    
                self.CURRENT_LIST[0][row+1][0]=True
                
                """Begin Changing Basic Info"""
                if col==0: # Ad No
                    
                    self.CURRENT_LIST[0][row+1][2]=value
                    
                elif col==1:# Roll No
                    
                    self.CURRENT_LIST[0][row+1][5]=value
                    
                elif col==2:    # Name
                    self.CURRENT_LIST[0][row+1][3]=value
                    
                    """End of Changing Basic Info"""
                elif col==3:#CE
                    
                    self.CURRENT_LIST[0][row+1][6]=value
                elif col==4:
                    self.CURRENT_LIST[0][row+1][8]=value
            
        else:
                   
            #if not self.paste_lock:
                
            self.grid_1.SetCellValue(row, col,self.current_cell_value)
                
            
        if col>2 and self.SUBJECT!="Attendance":
            self.CalculateTotal(row)
        self.CHANGES_TO_BE_SAVED=True
        self.button_1.Enabled=True
        #print  "end of any chng"
        
    def refresh(self):
        self.set_properties(YEAR,STD,DIV,TERM_INDEX,100)
        self.Show()
# end of class MyFrame




class gate(wx.Frame):
    def __init__(self, *args, **kwds):
        # Constructor
        
        
        
        kwds["style"] = wx.CAPTION|wx.CLOSE_BOX|wx.MINIMIZE_BOX
        wx.Frame.__init__(self, *args, **kwds)
        try:
            
            self.Parent.Hide()
            
            
        except:
            print "Error Closing Prent"
        
        self.label_1 = wx.StaticText(self, -1, "Year", style=wx.ALIGN_RIGHT|wx.ALIGN_CENTRE)
        self.combo_box_1 = wx.ComboBox(self, -1, choices=[ ], style=wx.CB_DROPDOWN|wx.CB_DROPDOWN|wx.CB_READONLY | wx.CB_SORT)

        
        self.label_2 = wx.StaticText(self, -1, "Standard", style=wx.ALIGN_RIGHT|wx.ALIGN_CENTRE)
        
        self.combo_box_2 = wx.ComboBox(self, -1, choices=[  'Select',"8", "9", "10"], style=wx.CB_DROPDOWN|wx.CB_DROPDOWN|wx.CB_READONLY)
        self.label_3 = wx.StaticText(self, -1, "Div", style=wx.ALIGN_CENTRE)
        self.combo_box_3 = wx.ComboBox(self, -1, choices=[ 'Select',], style=wx.CB_DROPDOWN|wx.CB_DROPDOWN|wx.CB_READONLY | wx.CB_SORT)
        self.label_4 = wx.StaticText(self, -1, "Term", style=wx.ALIGN_CENTRE)
        
        
        self.combo_box_4 = wx.ComboBox(self, -1, choices=[ 'Select', "Term 1", "Term 2", "Annual"], style=wx.CB_DROPDOWN|wx.CB_DROPDOWN|wx.CB_READONLY)
        
       
        self.button_1 = wx.Button(self, -1, "Close")
        self.button_2 = wx.Button(self, -1, "Go")
        
        #self.SetMenu()

        self.__set_properties()
        self.__do_layout()
        self.IsGridChild=0
        
        self.Bind(wx.EVT_COMBOBOX, self.on_year, self.combo_box_1)
        self.Bind(wx.EVT_COMBOBOX, self.on_class, self.combo_box_2)
        self.Bind(wx.EVT_COMBOBOX, self.on_division, self.combo_box_3)
        
        self.Bind(wx.EVT_BUTTON, self.Go_Clicked, self.button_2)
        self.Bind(wx.EVT_BUTTON, self.Cancel_Clicked, self.button_1)
        self.Bind(wx.EVT_CLOSE, self.OnClose)
        self.GridFrame = None
        
        self.YEAR=''
        #self.CalcSheet=SpreadSheet(self)
        
        self.DB=db_operations()
        self.load_year()
    def load_year(self):
                    
            self.combo_box_1.Clear() #year combo
            self.combo_box_3.Clear()# div combo
            
            
            years=self.DB.get_academic_year_list()
            years.insert(0,"Select")

            
            
            for item in years:
                self.combo_box_1.Append(str(item))
                
            self.combo_box_1.SetSelection(0) 
            self.combo_box_2.SetSelection(0) 
    def on_year(self, event):  # wxGlade: add_div.<event_handler>
        self.combo_box_2.SetSelection(0)
       
        self.YEAR=self.combo_box_1.Value.split('-')[0]
        self.combo_box_2.SetSelection(0)
        self.combo_box_3.Clear()
        self.combo_box_3.Append('Select')  
        self.combo_box_3.SetSelection(0)
        self.combo_box_4.SetSelection(0)
        
        event.Skip()

    def on_class(self, event):  # wxGlade: add_div.<event_handler>
        self.CLASS=self.combo_box_2.Value
        self.combo_box_3.Clear()
        self.load_div()
        self.combo_box_3.SetSelection(0)
        self.combo_box_4.SetSelection(0)
    def on_division(self,event):
        self.combo_box_4.SetSelection(0)
    def load_div(self):
        
        
        
        divs=self.DB.Get_Div(self.YEAR,self.CLASS)
        divs=['Select']+divs
        for item in divs:
            self.combo_box_3.Append(str(item))
    def OnClose(self,event):
       
        if self.Parent.GetTitle()=='Dash Board':
            self.Parent.Show()
        else:
            self.Parent.Close(True)
        event.Skip()
        
    
    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("Smart School")
        self.SetSize((450, 350))
        self.label_1.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.combo_box_1.SetSelection(0)
        self.label_2.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.combo_box_2.SetSelection(0)
        self.label_3.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.combo_box_3.SetSelection(0)        
        self.label_4.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.combo_box_4.SetSelection(0)
        
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_1 = wx.GridSizer(5, 2, 0, 0)
        
        grid_sizer_1.Add(self.label_1, 0, wx.LEFT|wx.TOP, 20)
        grid_sizer_1.Add(self.combo_box_1, 0, wx.TOP, 20)
        
        grid_sizer_1.Add(self.label_2, 0, wx.LEFT|wx.TOP, 20)
        grid_sizer_1.Add(self.combo_box_2, 0, wx.TOP, 20)
        grid_sizer_1.Add(self.label_3, 0, wx.LEFT|wx.TOP, 20)
        grid_sizer_1.Add(self.combo_box_3, 0, wx.RIGHT|wx.TOP, 20)
        grid_sizer_1.Add(self.label_4, 0, wx.LEFT|wx.TOP|wx.BOTTOM|wx.EXPAND, 20)
        grid_sizer_1.Add(self.combo_box_4, 0, wx.RIGHT|wx.TOP|wx.BOTTOM, 20)
        grid_sizer_1.Add(self.button_1, 0, wx.TOP|wx.ALIGN_RIGHT, 0)
        grid_sizer_1.Add(self.button_2, 0, wx.LEFT, 30)
        sizer_1.Add(grid_sizer_1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        self.Centre()
        # end wxGlade

    def Go_Clicked(self, event): # wxGlade: MyFrame.<event_handler>
        
        global STD,DIV,STUDENTS,TERM_INDEX,ATTENDANCE_INDEX  ,TERM    
        
        if self.combo_box_1.Value=="Select":
            
            dlg = wx.MessageDialog(self, 'Select  Year', '',wx.OK | wx.ICON_INFORMATION)
            dlg.ShowModal()
            dlg.Destroy()
            return 0
        elif self.combo_box_2.Value=="Select":
            
            dlg = wx.MessageDialog(self, 'Select  Standard', '',wx.OK | wx.ICON_INFORMATION)
            dlg.ShowModal()
            dlg.Destroy()
            return 0
        elif self.combo_box_3.Value=="Select":
            
            dlg = wx.MessageDialog(self, 'Select  Division', '',wx.OK | wx.ICON_INFORMATION)
            dlg.ShowModal()
            dlg.Destroy()
            return 0
        elif self.combo_box_4.Value=="Select":
            
            dlg = wx.MessageDialog(self, 'Select  Term of Exam', '',wx.OK | wx.ICON_INFORMATION)
            dlg.ShowModal()
            dlg.Destroy()
            return 0
        
        
        
        if self.combo_box_4.Value=="Term 1":
            TERM="I"
            TERM_INDEX=0
        elif self.combo_box_4.Value=="Term 2":
            TERM="II"
            TERM_INDEX=1
        elif self.combo_box_4.Value=="Annual":
            TERM="Annual"
            TERM_INDEX=2
         
                    
        if self.combo_box_1.Value!="Select" and self.combo_box_2.Value!="Select" and self.combo_box_2.Value!="Select":
            YEAR=self.combo_box_1.Value
            YEAR=YEAR.split("-")[0]
            STD=self.combo_box_2.Value
            DIV=self.combo_box_3.Value
            
            
            
            
        if self.IsGridChild==0:#creates new instance of Grid from if alreadynot
            
            self.GridFrame=None
            
                
            
            self.GridFrame = MyGridForm(self, -1, "")   
           
                
                 
              
            STRENGTH=self.DB.Get_Class_Strength(YEAR,STD,DIV)
            if STRENGTH!=0:
                self.GridFrame.set_properties(YEAR,STD,DIV,TERM_INDEX,STRENGTH)
                
            #self.CalcSheet. SetBGColorandReadOnly(self.GridFrame.grid_1)
            
        
        if STRENGTH !=0:
        
            self.GridFrame.Show()
            self.IsGridChild=1
            self.Hide()
            self.GridFrame.PopulateBasic()
            
        else:
            
            dlg = wx.MessageDialog(self, 'No student Enrolled in the Specified Class', '',wx.OK | wx.ICON_ERROR)
            dlg.ShowModal()
            dlg.Destroy()
            self.GridFrame.set_properties(YEAR,STD,DIV,TERM_INDEX,0)
            self.GridFrame.Show()
            self.IsGridChild=1
            self.Hide()
        event.Skip()

    def Cancel_Clicked(self, event): # wxGlade: MyFrame.<event_handler>
        
        self.Close()
        event.Skip()
        
   
                
                    
        
class CE_TE(wx.Dialog):
    def __init__(self, parent):
        # begin wxGlade: CE_TE.__init__
        #kwds["style"] = wx.CLOSE_BOX|wx.MINIMIZE_BOX
        wx.Dialog.__init__(self, parent,id=-1,title="CE and TE")
        self.parent=parent
        self.label_1 = wx.StaticText(self, -1, "Max_CE")
        self.text_ctrl_1 = wx.TextCtrl(self, -1, "")
        self.label_2 = wx.StaticText(self, -1, "Max_TE")
        self.text_ctrl_2 = wx.TextCtrl(self, -1, "")
        self.button_1 = wx.Button(self, -1, "OK")
        self.button_2 = wx.Button(self, -1, "Cancel")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_TEXT_ENTER, self.On_TE_Enter, self.text_ctrl_1)
        self.Bind(wx.EVT_TEXT, self.On_CE_Text, self.text_ctrl_1)
        self.Bind(wx.EVT_TEXT_ENTER, self.On_TE_Enter, self.text_ctrl_2)
        self.Bind(wx.EVT_TEXT, self.On_TE_Text, self.text_ctrl_2)
        self.Bind(wx.EVT_BUTTON, self.On_Ok, self.button_1)
        self.Bind(wx.EVT_BUTTON, self.On_Cancel, self.button_2)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: CE_TE.__set_properties
        self.SetTitle("Set CE and TE")
        self.SetSize((280, 170))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: CE_TE.__do_layout
        sizer_5 = wx.BoxSizer(wx.VERTICAL)
        sizer_8 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_7 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_6.Add(self.label_1, 0, wx.LEFT, 0)
        sizer_6.Add(self.text_ctrl_1, 0, wx.LEFT|wx.ALIGN_RIGHT, 35)
        sizer_5.Add(sizer_6, 1, wx.LEFT|wx.RIGHT|wx.TOP|wx.EXPAND, 30)
        sizer_7.Add(self.label_2, 0, wx.LEFT, 0)
        sizer_7.Add(self.text_ctrl_2, 0, wx.LEFT, 35)
        sizer_5.Add(sizer_7, 1, wx.LEFT|wx.RIGHT|wx.TOP|wx.EXPAND, 30)
        sizer_8.Add(self.button_2, 0, 0, 0)
        sizer_8.Add(self.button_1, 0, wx.LEFT, 35)
        sizer_5.Add(sizer_8, 1, wx.LEFT|wx.RIGHT|wx.TOP|wx.EXPAND, 20)
        self.SetSizer(sizer_5)
        self.text_ctrl_1.SetFocus()
        self.Layout()
        # end wxGlade

    def On_TE_Enter(self, event): # wxGlade: CE_TE.<event_handler>
        
        if self.IsInteger(self.text_ctrl_2.Value)==0:
            self.text_ctrl_2.Value=""
        event.Skip()

    def On_CE_Text(self, event): # wxGlade: CE_TE.<event_handler>
        
        if self.IsInteger(self.text_ctrl_1.Value)==0:
            self.text_ctrl_1.Value=""
        event.Skip()

    def On_TE_Text(self, event): # wxGlade: CE_TE.<event_handler>
        
       
        if self.IsInteger(self.text_ctrl_2.Value)==0:
            self.text_ctrl_2.Value=""
            
        event.Skip()
        

    def On_Ok(self, event): # wxGlade: CE_TE.<event_handler>
        
        global MAX_CE,MAX_TE
        if self.text_ctrl_2.Value!="" and self.text_ctrl_1.Value!="":
            
            MAX_CE=int(self.text_ctrl_1.Value)
            MAX_TE=int(self.text_ctrl_2.Value)
            self.parent.label_4.SetLabel("MAX_CE: "+str(MAX_CE ))
            
            self.parent.label_5.SetLabel("MAX_TE: "+str(MAX_TE)) 
            
            
        event.Skip()
        self.Close()

    def On_Cancel(self, event): # wxGlade: CE_TE.<event_handler>
        
        
            
        event.Skip()
        self.Close()
        
    def IsInteger(self,value):
        
        for i in range(len(value)):
            
            if ord(value[i])<48 or ord(value[i])>57:
                return 0
            
        return 1
    
    

if __name__ == "__main__":
    import gettext
    gettext.install("app") # replace with the appropriate catalog name

    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    institution = MyGridForm(None, wx.ID_ANY, "")
    DB=db_operations()
    YEAR=2017
    STD='8'
    DIV='A'
    TERM_INDEX=0
    STRENGTH=DB.Get_Class_Strength(YEAR,STD,DIV)
    if STRENGTH!=0:
        institution.set_properties(YEAR,STD,DIV,TERM_INDEX,STRENGTH)

    app.SetTopWindow(institution)
    institution.PopulateBasic()
    institution.Show()
    
    app.MainLoop()
